{"ast":null,"code":"import _inherits from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay) {\n  var scheduler = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : async;\n  var absoluteDelay = isDate(delay);\n  var delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);\n  return function (source) {\n    return source.lift(new DelayOperator(delayFor, scheduler));\n  };\n}\n\nvar DelayOperator = /*#__PURE__*/function () {\n  function DelayOperator(delay, scheduler) {\n    _classCallCheck(this, DelayOperator);\n\n    this.delay = delay;\n    this.scheduler = scheduler;\n  }\n\n  _createClass(DelayOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    }\n  }]);\n\n  return DelayOperator;\n}();\n\nvar DelaySubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(DelaySubscriber, _Subscriber);\n\n  var _super = _createSuper(DelaySubscriber);\n\n  function DelaySubscriber(destination, delay, scheduler) {\n    var _this;\n\n    _classCallCheck(this, DelaySubscriber);\n\n    _this = _super.call(this, destination);\n    _this.delay = delay;\n    _this.scheduler = scheduler;\n    _this.queue = [];\n    _this.active = false;\n    _this.errored = false;\n    return _this;\n  }\n\n  _createClass(DelaySubscriber, [{\n    key: \"_schedule\",\n    value: function _schedule(scheduler) {\n      this.active = true;\n      var destination = this.destination;\n      destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n        source: this,\n        destination: this.destination,\n        scheduler: scheduler\n      }));\n    }\n  }, {\n    key: \"scheduleNotification\",\n    value: function scheduleNotification(notification) {\n      if (this.errored === true) {\n        return;\n      }\n\n      var scheduler = this.scheduler;\n      var message = new DelayMessage(scheduler.now() + this.delay, notification);\n      this.queue.push(message);\n\n      if (this.active === false) {\n        this._schedule(scheduler);\n      }\n    }\n  }, {\n    key: \"_next\",\n    value: function _next(value) {\n      this.scheduleNotification(Notification.createNext(value));\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      this.errored = true;\n      this.queue = [];\n      this.destination.error(err);\n      this.unsubscribe();\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.scheduleNotification(Notification.createComplete());\n      this.unsubscribe();\n    }\n  }], [{\n    key: \"dispatch\",\n    value: function dispatch(state) {\n      var source = state.source;\n      var queue = source.queue;\n      var scheduler = state.scheduler;\n      var destination = state.destination;\n\n      while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {\n        queue.shift().notification.observe(destination);\n      }\n\n      if (queue.length > 0) {\n        var _delay = Math.max(0, queue[0].time - scheduler.now());\n\n        this.schedule(state, _delay);\n      } else {\n        this.unsubscribe();\n        source.active = false;\n      }\n    }\n  }]);\n\n  return DelaySubscriber;\n}(Subscriber);\n\nvar DelayMessage = function DelayMessage(time, notification) {\n  _classCallCheck(this, DelayMessage);\n\n  this.time = time;\n  this.notification = notification;\n}; //# sourceMappingURL=delay.js.map","map":{"version":3,"sources":["/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/rxjs/_esm2015/internal/operators/delay.js"],"names":["async","isDate","Subscriber","Notification","delay","scheduler","absoluteDelay","delayFor","now","Math","abs","source","lift","DelayOperator","subscriber","subscribe","DelaySubscriber","destination","queue","active","errored","add","schedule","dispatch","notification","message","DelayMessage","push","_schedule","value","scheduleNotification","createNext","err","error","unsubscribe","createComplete","state","length","time","shift","observe","max"],"mappings":"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","sourcesContent":["import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay, scheduler = async) {\n    const absoluteDelay = isDate(delay);\n    const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return (source) => source.lift(new DelayOperator(delayFor, scheduler));\n}\nclass DelayOperator {\n    constructor(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    }\n}\nclass DelaySubscriber extends Subscriber {\n    constructor(destination, delay, scheduler) {\n        super(destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    static dispatch(state) {\n        const source = state.source;\n        const queue = source.queue;\n        const scheduler = state.scheduler;\n        const destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            const delay = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    }\n    _schedule(scheduler) {\n        this.active = true;\n        const destination = this.destination;\n        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    }\n    scheduleNotification(notification) {\n        if (this.errored === true) {\n            return;\n        }\n        const scheduler = this.scheduler;\n        const message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    }\n    _next(value) {\n        this.scheduleNotification(Notification.createNext(value));\n    }\n    _error(err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleNotification(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nclass DelayMessage {\n    constructor(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n}\n//# sourceMappingURL=delay.js.map"]},"metadata":{},"sourceType":"module"}