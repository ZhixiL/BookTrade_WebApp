{"ast":null,"code":"import _assertThisInitialized from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return function (source) {\n    return source.lift(new WindowToggleOperator(openings, closingSelector));\n  };\n}\n\nvar WindowToggleOperator = /*#__PURE__*/function () {\n  function WindowToggleOperator(openings, closingSelector) {\n    _classCallCheck(this, WindowToggleOperator);\n\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  _createClass(WindowToggleOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n  }]);\n\n  return WindowToggleOperator;\n}();\n\nvar WindowToggleSubscriber = /*#__PURE__*/function (_OuterSubscriber) {\n  _inherits(WindowToggleSubscriber, _OuterSubscriber);\n\n  var _super = _createSuper(WindowToggleSubscriber);\n\n  function WindowToggleSubscriber(destination, openings, closingSelector) {\n    var _this;\n\n    _classCallCheck(this, WindowToggleSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.openings = openings;\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(_this.openSubscription = subscribeToResult(_assertThisInitialized(_this), openings, openings));\n\n    return _this;\n  }\n\n  _createClass(WindowToggleSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var contexts = this.contexts;\n\n      if (contexts) {\n        var len = contexts.length;\n\n        for (var i = 0; i < len; i++) {\n          contexts[i].window.next(value);\n        }\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.error(err);\n          context.subscription.unsubscribe();\n        }\n      }\n\n      _get(_getPrototypeOf(WindowToggleSubscriber.prototype), \"_error\", this).call(this, err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.complete();\n          context.subscription.unsubscribe();\n        }\n      }\n\n      _get(_getPrototypeOf(WindowToggleSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var contexts = this.contexts;\n      this.contexts = null;\n\n      if (contexts) {\n        var len = contexts.length;\n        var index = -1;\n\n        while (++index < len) {\n          var context = contexts[index];\n          context.window.unsubscribe();\n          context.subscription.unsubscribe();\n        }\n      }\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n      if (outerValue === this.openings) {\n        var closingNotifier;\n\n        try {\n          var closingSelector = this.closingSelector;\n          closingNotifier = closingSelector(innerValue);\n        } catch (e) {\n          return this.error(e);\n        }\n\n        var window = new Subject();\n        var subscription = new Subscription();\n        var context = {\n          window: window,\n          subscription: subscription\n        };\n        this.contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n        if (innerSubscription.closed) {\n          this.closeWindow(this.contexts.length - 1);\n        } else {\n          innerSubscription.context = context;\n          subscription.add(innerSubscription);\n        }\n\n        this.destination.next(window);\n      } else {\n        this.closeWindow(this.contexts.indexOf(outerValue));\n      }\n    }\n  }, {\n    key: \"notifyError\",\n    value: function notifyError(err) {\n      this.error(err);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete(inner) {\n      if (inner !== this.openSubscription) {\n        this.closeWindow(this.contexts.indexOf(inner.context));\n      }\n    }\n  }, {\n    key: \"closeWindow\",\n    value: function closeWindow(index) {\n      if (index === -1) {\n        return;\n      }\n\n      var contexts = this.contexts;\n      var context = contexts[index];\n      var window = context.window,\n          subscription = context.subscription;\n      contexts.splice(index, 1);\n      window.complete();\n      subscription.unsubscribe();\n    }\n  }]);\n\n  return WindowToggleSubscriber;\n}(OuterSubscriber); //# sourceMappingURL=windowToggle.js.map","map":{"version":3,"sources":["/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/rxjs/_esm2015/internal/operators/windowToggle.js"],"names":["Subject","Subscription","OuterSubscriber","subscribeToResult","windowToggle","openings","closingSelector","source","lift","WindowToggleOperator","subscriber","subscribe","WindowToggleSubscriber","destination","contexts","add","openSubscription","value","len","length","i","window","next","err","index","context","error","subscription","unsubscribe","complete","outerValue","innerValue","outerIndex","innerIndex","innerSub","closingNotifier","e","push","innerSubscription","closed","closeWindow","indexOf","inner","splice"],"mappings":"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","sourcesContent":["import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n    return (source) => source.lift(new WindowToggleOperator(openings, closingSelector));\n}\nclass WindowToggleOperator {\n    constructor(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n}\nclass WindowToggleSubscriber extends OuterSubscriber {\n    constructor(destination, openings, closingSelector) {\n        super(destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n    }\n    _next(value) {\n        const { contexts } = this;\n        if (contexts) {\n            const len = contexts.length;\n            for (let i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    }\n    _error(err) {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        super._error(err);\n    }\n    _complete() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            let closingNotifier;\n            try {\n                const { closingSelector } = this;\n                closingNotifier = closingSelector(innerValue);\n            }\n            catch (e) {\n                return this.error(e);\n            }\n            const window = new Subject();\n            const subscription = new Subscription();\n            const context = { window, subscription };\n            this.contexts.push(context);\n            const innerSubscription = subscribeToResult(this, closingNotifier, context);\n            if (innerSubscription.closed) {\n                this.closeWindow(this.contexts.length - 1);\n            }\n            else {\n                innerSubscription.context = context;\n                subscription.add(innerSubscription);\n            }\n            this.destination.next(window);\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    }\n    notifyError(err) {\n        this.error(err);\n    }\n    notifyComplete(inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    }\n    closeWindow(index) {\n        if (index === -1) {\n            return;\n        }\n        const { contexts } = this;\n        const context = contexts[index];\n        const { window, subscription } = context;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    }\n}\n//# sourceMappingURL=windowToggle.js.map"]},"metadata":{},"sourceType":"module"}