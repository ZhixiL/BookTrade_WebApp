{"ast":null,"code":"import _classCallCheck from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    var connectable = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\nexport var MulticastOperator = /*#__PURE__*/function () {\n  function MulticastOperator(subjectFactory, selector) {\n    _classCallCheck(this, MulticastOperator);\n\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n\n  _createClass(MulticastOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      var selector = this.selector;\n      var subject = this.subjectFactory();\n      var subscription = selector(subject).subscribe(subscriber);\n      subscription.add(source.subscribe(subject));\n      return subscription;\n    }\n  }]);\n\n  return MulticastOperator;\n}(); //# sourceMappingURL=multicast.js.map","map":{"version":3,"sources":["/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/rxjs/_esm2015/internal/operators/multicast.js"],"names":["connectableObservableDescriptor","multicast","subjectOrSubjectFactory","selector","multicastOperatorFunction","source","subjectFactory","lift","MulticastOperator","connectable","Object","create","subscriber","subject","subscription","subscribe","add"],"mappings":";;AAAA,SAASA,+BAAT,QAAgD,qCAAhD;AACA,OAAO,SAASC,SAAT,CAAmBC,uBAAnB,EAA4CC,QAA5C,EAAsD;AACzD,SAAO,SAASC,yBAAT,CAAmCC,MAAnC,EAA2C;AAC9C,QAAIC,cAAJ;;AACA,QAAI,OAAOJ,uBAAP,KAAmC,UAAvC,EAAmD;AAC/CI,MAAAA,cAAc,GAAGJ,uBAAjB;AACH,KAFD,MAGK;AACDI,MAAAA,cAAc,GAAG,SAASA,cAAT,GAA0B;AACvC,eAAOJ,uBAAP;AACH,OAFD;AAGH;;AACD,QAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAChC,aAAOE,MAAM,CAACE,IAAP,CAAY,IAAIC,iBAAJ,CAAsBF,cAAtB,EAAsCH,QAAtC,CAAZ,CAAP;AACH;;AACD,QAAMM,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsBL,+BAAtB,CAApB;AACAS,IAAAA,WAAW,CAACJ,MAAZ,GAAqBA,MAArB;AACAI,IAAAA,WAAW,CAACH,cAAZ,GAA6BA,cAA7B;AACA,WAAOG,WAAP;AACH,GAjBD;AAkBH;AACD,WAAaD,iBAAb;AACI,6BAAYF,cAAZ,EAA4BH,QAA5B,EAAsC;AAAA;;AAClC,SAAKG,cAAL,GAAsBA,cAAtB;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACH;;AAJL;AAAA;AAAA,WAKI,cAAKS,UAAL,EAAiBP,MAAjB,EAAyB;AAAA,UACbF,QADa,GACA,IADA,CACbA,QADa;AAErB,UAAMU,OAAO,GAAG,KAAKP,cAAL,EAAhB;AACA,UAAMQ,YAAY,GAAGX,QAAQ,CAACU,OAAD,CAAR,CAAkBE,SAAlB,CAA4BH,UAA5B,CAArB;AACAE,MAAAA,YAAY,CAACE,GAAb,CAAiBX,MAAM,CAACU,SAAP,CAAiBF,OAAjB,CAAjB;AACA,aAAOC,YAAP;AACH;AAXL;;AAAA;AAAA,I,CAaA","sourcesContent":["import { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        let subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        const connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport class MulticastOperator {\n    constructor(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    call(subscriber, source) {\n        const { selector } = this;\n        const subject = this.subjectFactory();\n        const subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    }\n}\n//# sourceMappingURL=multicast.js.map"]},"metadata":{},"sourceType":"module"}