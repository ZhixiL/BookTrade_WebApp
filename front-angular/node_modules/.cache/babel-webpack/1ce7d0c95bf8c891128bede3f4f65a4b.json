{"ast":null,"code":"import _get from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n  return function (source) {\n    return source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n  };\n}\n\nvar GroupByOperator = /*#__PURE__*/function () {\n  function GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector) {\n    _classCallCheck(this, GroupByOperator);\n\n    this.keySelector = keySelector;\n    this.elementSelector = elementSelector;\n    this.durationSelector = durationSelector;\n    this.subjectSelector = subjectSelector;\n  }\n\n  _createClass(GroupByOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    }\n  }]);\n\n  return GroupByOperator;\n}();\n\nvar GroupBySubscriber = /*#__PURE__*/function (_Subscriber) {\n  _inherits(GroupBySubscriber, _Subscriber);\n\n  var _super = _createSuper(GroupBySubscriber);\n\n  function GroupBySubscriber(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n    var _this;\n\n    _classCallCheck(this, GroupBySubscriber);\n\n    _this = _super.call(this, destination);\n    _this.keySelector = keySelector;\n    _this.elementSelector = elementSelector;\n    _this.durationSelector = durationSelector;\n    _this.subjectSelector = subjectSelector;\n    _this.groups = null;\n    _this.attemptedToUnsubscribe = false;\n    _this.count = 0;\n    return _this;\n  }\n\n  _createClass(GroupBySubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      var key;\n\n      try {\n        key = this.keySelector(value);\n      } catch (err) {\n        this.error(err);\n        return;\n      }\n\n      this._group(value, key);\n    }\n  }, {\n    key: \"_group\",\n    value: function _group(value, key) {\n      var groups = this.groups;\n\n      if (!groups) {\n        groups = this.groups = new Map();\n      }\n\n      var group = groups.get(key);\n      var element;\n\n      if (this.elementSelector) {\n        try {\n          element = this.elementSelector(value);\n        } catch (err) {\n          this.error(err);\n        }\n      } else {\n        element = value;\n      }\n\n      if (!group) {\n        group = this.subjectSelector ? this.subjectSelector() : new Subject();\n        groups.set(key, group);\n        var groupedObservable = new GroupedObservable(key, group, this);\n        this.destination.next(groupedObservable);\n\n        if (this.durationSelector) {\n          var duration;\n\n          try {\n            duration = this.durationSelector(new GroupedObservable(key, group));\n          } catch (err) {\n            this.error(err);\n            return;\n          }\n\n          this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n        }\n      }\n\n      if (!group.closed) {\n        group.next(element);\n      }\n    }\n  }, {\n    key: \"_error\",\n    value: function _error(err) {\n      var groups = this.groups;\n\n      if (groups) {\n        groups.forEach(function (group, key) {\n          group.error(err);\n        });\n        groups.clear();\n      }\n\n      this.destination.error(err);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var groups = this.groups;\n\n      if (groups) {\n        groups.forEach(function (group, key) {\n          group.complete();\n        });\n        groups.clear();\n      }\n\n      this.destination.complete();\n    }\n  }, {\n    key: \"removeGroup\",\n    value: function removeGroup(key) {\n      this.groups.delete(key);\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      if (!this.closed) {\n        this.attemptedToUnsubscribe = true;\n\n        if (this.count === 0) {\n          _get(_getPrototypeOf(GroupBySubscriber.prototype), \"unsubscribe\", this).call(this);\n        }\n      }\n    }\n  }]);\n\n  return GroupBySubscriber;\n}(Subscriber);\n\nvar GroupDurationSubscriber = /*#__PURE__*/function (_Subscriber2) {\n  _inherits(GroupDurationSubscriber, _Subscriber2);\n\n  var _super2 = _createSuper(GroupDurationSubscriber);\n\n  function GroupDurationSubscriber(key, group, parent) {\n    var _this2;\n\n    _classCallCheck(this, GroupDurationSubscriber);\n\n    _this2 = _super2.call(this, group);\n    _this2.key = key;\n    _this2.group = group;\n    _this2.parent = parent;\n    return _this2;\n  }\n\n  _createClass(GroupDurationSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.complete();\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      var parent = this.parent,\n          key = this.key;\n      this.key = this.parent = null;\n\n      if (parent) {\n        parent.removeGroup(key);\n      }\n    }\n  }]);\n\n  return GroupDurationSubscriber;\n}(Subscriber);\n\nexport var GroupedObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(GroupedObservable, _Observable);\n\n  var _super3 = _createSuper(GroupedObservable);\n\n  function GroupedObservable(key, groupSubject, refCountSubscription) {\n    var _this3;\n\n    _classCallCheck(this, GroupedObservable);\n\n    _this3 = _super3.call(this);\n    _this3.key = key;\n    _this3.groupSubject = groupSubject;\n    _this3.refCountSubscription = refCountSubscription;\n    return _this3;\n  }\n\n  _createClass(GroupedObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      var subscription = new Subscription();\n      var refCountSubscription = this.refCountSubscription,\n          groupSubject = this.groupSubject;\n\n      if (refCountSubscription && !refCountSubscription.closed) {\n        subscription.add(new InnerRefCountSubscription(refCountSubscription));\n      }\n\n      subscription.add(groupSubject.subscribe(subscriber));\n      return subscription;\n    }\n  }]);\n\n  return GroupedObservable;\n}(Observable);\n\nvar InnerRefCountSubscription = /*#__PURE__*/function (_Subscription) {\n  _inherits(InnerRefCountSubscription, _Subscription);\n\n  var _super4 = _createSuper(InnerRefCountSubscription);\n\n  function InnerRefCountSubscription(parent) {\n    var _this4;\n\n    _classCallCheck(this, InnerRefCountSubscription);\n\n    _this4 = _super4.call(this);\n    _this4.parent = parent;\n    parent.count++;\n    return _this4;\n  }\n\n  _createClass(InnerRefCountSubscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var parent = this.parent;\n\n      if (!parent.closed && !this.closed) {\n        _get(_getPrototypeOf(InnerRefCountSubscription.prototype), \"unsubscribe\", this).call(this);\n\n        parent.count -= 1;\n\n        if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n          parent.unsubscribe();\n        }\n      }\n    }\n  }]);\n\n  return InnerRefCountSubscription;\n}(Subscription); //# sourceMappingURL=groupBy.js.map","map":{"version":3,"sources":["/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/rxjs/_esm2015/internal/operators/groupBy.js"],"names":["Subscriber","Subscription","Observable","Subject","groupBy","keySelector","elementSelector","durationSelector","subjectSelector","source","lift","GroupByOperator","subscriber","subscribe","GroupBySubscriber","destination","groups","attemptedToUnsubscribe","count","value","key","err","error","_group","Map","group","get","element","set","groupedObservable","GroupedObservable","next","duration","add","GroupDurationSubscriber","closed","forEach","clear","complete","delete","parent","removeGroup","groupSubject","refCountSubscription","subscription","InnerRefCountSubscription","unsubscribe"],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nexport function groupBy(keySelector, elementSelector, durationSelector, subjectSelector) {\n    return (source) => source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\nclass GroupByOperator {\n    constructor(keySelector, elementSelector, durationSelector, subjectSelector) {\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new GroupBySubscriber(subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector));\n    }\n}\nclass GroupBySubscriber extends Subscriber {\n    constructor(destination, keySelector, elementSelector, durationSelector, subjectSelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.elementSelector = elementSelector;\n        this.durationSelector = durationSelector;\n        this.subjectSelector = subjectSelector;\n        this.groups = null;\n        this.attemptedToUnsubscribe = false;\n        this.count = 0;\n    }\n    _next(value) {\n        let key;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            this.error(err);\n            return;\n        }\n        this._group(value, key);\n    }\n    _group(value, key) {\n        let groups = this.groups;\n        if (!groups) {\n            groups = this.groups = new Map();\n        }\n        let group = groups.get(key);\n        let element;\n        if (this.elementSelector) {\n            try {\n                element = this.elementSelector(value);\n            }\n            catch (err) {\n                this.error(err);\n            }\n        }\n        else {\n            element = value;\n        }\n        if (!group) {\n            group = (this.subjectSelector ? this.subjectSelector() : new Subject());\n            groups.set(key, group);\n            const groupedObservable = new GroupedObservable(key, group, this);\n            this.destination.next(groupedObservable);\n            if (this.durationSelector) {\n                let duration;\n                try {\n                    duration = this.durationSelector(new GroupedObservable(key, group));\n                }\n                catch (err) {\n                    this.error(err);\n                    return;\n                }\n                this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n            }\n        }\n        if (!group.closed) {\n            group.next(element);\n        }\n    }\n    _error(err) {\n        const groups = this.groups;\n        if (groups) {\n            groups.forEach((group, key) => {\n                group.error(err);\n            });\n            groups.clear();\n        }\n        this.destination.error(err);\n    }\n    _complete() {\n        const groups = this.groups;\n        if (groups) {\n            groups.forEach((group, key) => {\n                group.complete();\n            });\n            groups.clear();\n        }\n        this.destination.complete();\n    }\n    removeGroup(key) {\n        this.groups.delete(key);\n    }\n    unsubscribe() {\n        if (!this.closed) {\n            this.attemptedToUnsubscribe = true;\n            if (this.count === 0) {\n                super.unsubscribe();\n            }\n        }\n    }\n}\nclass GroupDurationSubscriber extends Subscriber {\n    constructor(key, group, parent) {\n        super(group);\n        this.key = key;\n        this.group = group;\n        this.parent = parent;\n    }\n    _next(value) {\n        this.complete();\n    }\n    _unsubscribe() {\n        const { parent, key } = this;\n        this.key = this.parent = null;\n        if (parent) {\n            parent.removeGroup(key);\n        }\n    }\n}\nexport class GroupedObservable extends Observable {\n    constructor(key, groupSubject, refCountSubscription) {\n        super();\n        this.key = key;\n        this.groupSubject = groupSubject;\n        this.refCountSubscription = refCountSubscription;\n    }\n    _subscribe(subscriber) {\n        const subscription = new Subscription();\n        const { refCountSubscription, groupSubject } = this;\n        if (refCountSubscription && !refCountSubscription.closed) {\n            subscription.add(new InnerRefCountSubscription(refCountSubscription));\n        }\n        subscription.add(groupSubject.subscribe(subscriber));\n        return subscription;\n    }\n}\nclass InnerRefCountSubscription extends Subscription {\n    constructor(parent) {\n        super();\n        this.parent = parent;\n        parent.count++;\n    }\n    unsubscribe() {\n        const parent = this.parent;\n        if (!parent.closed && !this.closed) {\n            super.unsubscribe();\n            parent.count -= 1;\n            if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n                parent.unsubscribe();\n            }\n        }\n    }\n}\n//# sourceMappingURL=groupBy.js.map"]},"metadata":{},"sourceType":"module"}