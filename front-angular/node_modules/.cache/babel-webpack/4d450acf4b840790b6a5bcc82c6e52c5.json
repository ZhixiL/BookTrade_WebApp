{"ast":null,"code":"import _get from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nvar BufferWhenOperator = /*#__PURE__*/function () {\n  function BufferWhenOperator(closingSelector) {\n    _classCallCheck(this, BufferWhenOperator);\n\n    this.closingSelector = closingSelector;\n  }\n\n  _createClass(BufferWhenOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    }\n  }]);\n\n  return BufferWhenOperator;\n}();\n\nvar BufferWhenSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(BufferWhenSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(BufferWhenSubscriber);\n\n  function BufferWhenSubscriber(destination, closingSelector) {\n    var _this;\n\n    _classCallCheck(this, BufferWhenSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.closingSelector = closingSelector;\n    _this.subscribing = false;\n\n    _this.openBuffer();\n\n    return _this;\n  }\n\n  _createClass(BufferWhenSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      this.buffer.push(value);\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      var buffer = this.buffer;\n\n      if (buffer) {\n        this.destination.next(buffer);\n      }\n\n      _get(_getPrototypeOf(BufferWhenSubscriber.prototype), \"_complete\", this).call(this);\n    }\n  }, {\n    key: \"_unsubscribe\",\n    value: function _unsubscribe() {\n      this.buffer = undefined;\n      this.subscribing = false;\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext() {\n      this.openBuffer();\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      if (this.subscribing) {\n        this.complete();\n      } else {\n        this.openBuffer();\n      }\n    }\n  }, {\n    key: \"openBuffer\",\n    value: function openBuffer() {\n      var closingSubscription = this.closingSubscription;\n\n      if (closingSubscription) {\n        this.remove(closingSubscription);\n        closingSubscription.unsubscribe();\n      }\n\n      var buffer = this.buffer;\n\n      if (this.buffer) {\n        this.destination.next(buffer);\n      }\n\n      this.buffer = [];\n      var closingNotifier;\n\n      try {\n        var closingSelector = this.closingSelector;\n        closingNotifier = closingSelector();\n      } catch (err) {\n        return this.error(err);\n      }\n\n      closingSubscription = new Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n      this.subscribing = false;\n    }\n  }]);\n\n  return BufferWhenSubscriber;\n}(SimpleOuterSubscriber); //# sourceMappingURL=bufferWhen.js.map","map":{"version":3,"sources":["/Users/chunli/Desktop/newbooktrade/CEN4090L-Team5/front-angular/node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js"],"names":["Subscription","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","bufferWhen","closingSelector","source","lift","BufferWhenOperator","subscriber","subscribe","BufferWhenSubscriber","destination","subscribing","openBuffer","value","buffer","push","next","undefined","complete","closingSubscription","remove","unsubscribe","closingNotifier","err","error","add"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,qBAAT,EAAgCC,cAAhC,EAAgDC,qBAAhD,QAA6E,mBAA7E;AACA,OAAO,SAASC,UAAT,CAAoBC,eAApB,EAAqC;AACxC,SAAO,UAAUC,MAAV,EAAkB;AACrB,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,kBAAJ,CAAuBH,eAAvB,CAAZ,CAAP;AACH,GAFD;AAGH;;IACKG,kB;AACF,8BAAYH,eAAZ,EAA6B;AAAA;;AACzB,SAAKA,eAAL,GAAuBA,eAAvB;AACH;;;;WACD,cAAKI,UAAL,EAAiBH,MAAjB,EAAyB;AACrB,aAAOA,MAAM,CAACI,SAAP,CAAiB,IAAIC,oBAAJ,CAAyBF,UAAzB,EAAqC,KAAKJ,eAA1C,CAAjB,CAAP;AACH;;;;;;IAECM,oB;;;;;AACF,gCAAYC,WAAZ,EAAyBP,eAAzB,EAA0C;AAAA;;AAAA;;AACtC,8BAAMO,WAAN;AACA,UAAKP,eAAL,GAAuBA,eAAvB;AACA,UAAKQ,WAAL,GAAmB,KAAnB;;AACA,UAAKC,UAAL;;AAJsC;AAKzC;;;;WACD,eAAMC,KAAN,EAAa;AACT,WAAKC,MAAL,CAAYC,IAAZ,CAAiBF,KAAjB;AACH;;;WACD,qBAAY;AACR,UAAMC,MAAM,GAAG,KAAKA,MAApB;;AACA,UAAIA,MAAJ,EAAY;AACR,aAAKJ,WAAL,CAAiBM,IAAjB,CAAsBF,MAAtB;AACH;;AACD;AACH;;;WACD,wBAAe;AACX,WAAKA,MAAL,GAAcG,SAAd;AACA,WAAKN,WAAL,GAAmB,KAAnB;AACH;;;WACD,sBAAa;AACT,WAAKC,UAAL;AACH;;;WACD,0BAAiB;AACb,UAAI,KAAKD,WAAT,EAAsB;AAClB,aAAKO,QAAL;AACH,OAFD,MAGK;AACD,aAAKN,UAAL;AACH;AACJ;;;WACD,sBAAa;AAAA,UACHO,mBADG,GACqB,IADrB,CACHA,mBADG;;AAET,UAAIA,mBAAJ,EAAyB;AACrB,aAAKC,MAAL,CAAYD,mBAAZ;AACAA,QAAAA,mBAAmB,CAACE,WAApB;AACH;;AACD,UAAMP,MAAM,GAAG,KAAKA,MAApB;;AACA,UAAI,KAAKA,MAAT,EAAiB;AACb,aAAKJ,WAAL,CAAiBM,IAAjB,CAAsBF,MAAtB;AACH;;AACD,WAAKA,MAAL,GAAc,EAAd;AACA,UAAIQ,eAAJ;;AACA,UAAI;AAAA,YACQnB,eADR,GAC4B,IAD5B,CACQA,eADR;AAEAmB,QAAAA,eAAe,GAAGnB,eAAe,EAAjC;AACH,OAHD,CAIA,OAAOoB,GAAP,EAAY;AACR,eAAO,KAAKC,KAAL,CAAWD,GAAX,CAAP;AACH;;AACDJ,MAAAA,mBAAmB,GAAG,IAAIrB,YAAJ,EAAtB;AACA,WAAKqB,mBAAL,GAA2BA,mBAA3B;AACA,WAAKM,GAAL,CAASN,mBAAT;AACA,WAAKR,WAAL,GAAmB,IAAnB;AACAQ,MAAAA,mBAAmB,CAACM,GAApB,CAAwBzB,cAAc,CAACsB,eAAD,EAAkB,IAAIrB,qBAAJ,CAA0B,IAA1B,CAAlB,CAAtC;AACA,WAAKU,WAAL,GAAmB,KAAnB;AACH;;;;EAzD8BZ,qB,GA2DnC","sourcesContent":["import { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nclass BufferWhenOperator {\n    constructor(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    }\n}\nclass BufferWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, closingSelector) {\n        super(destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    _next(value) {\n        this.buffer.push(value);\n    }\n    _complete() {\n        const buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        this.buffer = undefined;\n        this.subscribing = false;\n    }\n    notifyNext() {\n        this.openBuffer();\n    }\n    notifyComplete() {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    }\n    openBuffer() {\n        let { closingSubscription } = this;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        const buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        let closingNotifier;\n        try {\n            const { closingSelector } = this;\n            closingNotifier = closingSelector();\n        }\n        catch (err) {\n            return this.error(err);\n        }\n        closingSubscription = new Subscription();\n        this.closingSubscription = closingSubscription;\n        this.add(closingSubscription);\n        this.subscribing = true;\n        closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n        this.subscribing = false;\n    }\n}\n//# sourceMappingURL=bufferWhen.js.map"]},"metadata":{},"sourceType":"module"}