{"ast":null,"code":"import _inherits from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createClass from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _classCallCheck from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\n/**\n * @license Angular v11.2.6\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar HttpHandler = function HttpHandler() {\n  _classCallCheck(this, HttpHandler);\n};\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\n\n\nvar HttpBackend = function HttpBackend() {\n  _classCallCheck(this, HttpBackend);\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\n\n\nvar HttpHeaders = /*#__PURE__*/function () {\n  /**  Constructs a new HTTP header object with the given values.*/\n  function HttpHeaders(headers) {\n    var _this = this;\n\n    _classCallCheck(this, HttpHeaders);\n\n    /**\n     * Internal map of lowercased header names to the normalized\n     * form of the name (the form seen first).\n     */\n    this.normalizedNames = new Map();\n    /**\n     * Queued updates to be materialized the next initialization.\n     */\n\n    this.lazyUpdate = null;\n\n    if (!headers) {\n      this.headers = new Map();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = function () {\n        _this.headers = new Map();\n        headers.split('\\n').forEach(function (line) {\n          var index = line.indexOf(':');\n\n          if (index > 0) {\n            var name = line.slice(0, index);\n            var key = name.toLowerCase();\n            var value = line.slice(index + 1).trim();\n\n            _this.maybeSetNormalizedName(name, key);\n\n            if (_this.headers.has(key)) {\n              _this.headers.get(key).push(value);\n            } else {\n              _this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = function () {\n        _this.headers = new Map();\n        Object.keys(headers).forEach(function (name) {\n          var values = headers[name];\n          var key = name.toLowerCase();\n\n          if (typeof values === 'string') {\n            values = [values];\n          }\n\n          if (values.length > 0) {\n            _this.headers.set(key, values);\n\n            _this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n\n\n  _createClass(HttpHeaders, [{\n    key: \"has\",\n    value: function has(name) {\n      this.init();\n      return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      this.init();\n      var values = this.headers.get(name.toLowerCase());\n      return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(name) {\n      this.init();\n      return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(name, value) {\n      return this.clone({\n        name: name,\n        value: value,\n        op: 'd'\n      });\n    }\n  }, {\n    key: \"maybeSetNormalizedName\",\n    value: function maybeSetNormalizedName(name, lcName) {\n      if (!this.normalizedNames.has(lcName)) {\n        this.normalizedNames.set(lcName, name);\n      }\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this2 = this;\n\n      if (!!this.lazyInit) {\n        if (this.lazyInit instanceof HttpHeaders) {\n          this.copyFrom(this.lazyInit);\n        } else {\n          this.lazyInit();\n        }\n\n        this.lazyInit = null;\n\n        if (!!this.lazyUpdate) {\n          this.lazyUpdate.forEach(function (update) {\n            return _this2.applyUpdate(update);\n          });\n          this.lazyUpdate = null;\n        }\n      }\n    }\n  }, {\n    key: \"copyFrom\",\n    value: function copyFrom(other) {\n      var _this3 = this;\n\n      other.init();\n      Array.from(other.headers.keys()).forEach(function (key) {\n        _this3.headers.set(key, other.headers.get(key));\n\n        _this3.normalizedNames.set(key, other.normalizedNames.get(key));\n      });\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpHeaders();\n      clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof HttpHeaders ? this.lazyInit : this;\n      clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n      return clone;\n    }\n  }, {\n    key: \"applyUpdate\",\n    value: function applyUpdate(update) {\n      var key = update.name.toLowerCase();\n\n      switch (update.op) {\n        case 'a':\n        case 's':\n          var value = update.value;\n\n          if (typeof value === 'string') {\n            value = [value];\n          }\n\n          if (value.length === 0) {\n            return;\n          }\n\n          this.maybeSetNormalizedName(update.name, key);\n          var base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n          base.push.apply(base, _toConsumableArray(value));\n          this.headers.set(key, base);\n          break;\n\n        case 'd':\n          var toDelete = update.value;\n\n          if (!toDelete) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            var existing = this.headers.get(key);\n\n            if (!existing) {\n              return;\n            }\n\n            existing = existing.filter(function (value) {\n              return toDelete.indexOf(value) === -1;\n            });\n\n            if (existing.length === 0) {\n              this.headers.delete(key);\n              this.normalizedNames.delete(key);\n            } else {\n              this.headers.set(key, existing);\n            }\n          }\n\n          break;\n      }\n    }\n    /**\n     * @internal\n     */\n\n  }, {\n    key: \"forEach\",\n    value: function forEach(fn) {\n      var _this4 = this;\n\n      this.init();\n      Array.from(this.normalizedNames.keys()).forEach(function (key) {\n        return fn(_this4.normalizedNames.get(key), _this4.headers.get(key));\n      });\n    }\n  }]);\n\n  return HttpHeaders;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\n\n\nvar HttpUrlEncodingCodec = /*#__PURE__*/function () {\n  function HttpUrlEncodingCodec() {\n    _classCallCheck(this, HttpUrlEncodingCodec);\n  }\n\n  _createClass(HttpUrlEncodingCodec, [{\n    key: \"encodeKey\",\n    value:\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    function encodeKey(key) {\n      return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n\n  }, {\n    key: \"encodeValue\",\n    value: function encodeValue(value) {\n      return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n\n  }, {\n    key: \"decodeKey\",\n    value: function decodeKey(key) {\n      return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n\n  }, {\n    key: \"decodeValue\",\n    value: function decodeValue(value) {\n      return decodeURIComponent(value);\n    }\n  }]);\n\n  return HttpUrlEncodingCodec;\n}();\n\nfunction paramParser(rawParams, codec) {\n  var map = new Map();\n\n  if (rawParams.length > 0) {\n    // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n    // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n    // may start with the `?` char, so we strip it if it's present.\n    var params = rawParams.replace(/^\\?/, '').split('&');\n    params.forEach(function (param) {\n      var eqIdx = param.indexOf('=');\n\n      var _ref = eqIdx == -1 ? [codec.decodeKey(param), ''] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))],\n          _ref2 = _slicedToArray(_ref, 2),\n          key = _ref2[0],\n          val = _ref2[1];\n\n      var list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n\n  return map;\n}\n\nfunction standardEncoding(v) {\n  return encodeURIComponent(v).replace(/%40/gi, '@').replace(/%3A/gi, ':').replace(/%24/gi, '$').replace(/%2C/gi, ',').replace(/%3B/gi, ';').replace(/%2B/gi, '+').replace(/%3D/gi, '=').replace(/%3F/gi, '?').replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\n\n\nvar HttpParams = /*#__PURE__*/function () {\n  function HttpParams() {\n    var _this5 = this;\n\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpParams);\n\n    this.updates = null;\n    this.cloneFrom = null;\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(\"Cannot specify both fromString and fromObject.\");\n      }\n\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map();\n      Object.keys(options.fromObject).forEach(function (key) {\n        var value = options.fromObject[key];\n\n        _this5.map.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n\n\n  _createClass(HttpParams, [{\n    key: \"has\",\n    value: function has(param) {\n      this.init();\n      return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(param) {\n      this.init();\n      var res = this.map.get(param);\n      return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll(param) {\n      this.init();\n      return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      this.init();\n      return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n\n  }, {\n    key: \"append\",\n    value: function append(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'a'\n      });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n\n  }, {\n    key: \"appendAll\",\n    value: function appendAll(params) {\n      var updates = [];\n      Object.keys(params).forEach(function (param) {\n        var value = params[param];\n\n        if (Array.isArray(value)) {\n          value.forEach(function (_value) {\n            updates.push({\n              param: param,\n              value: _value,\n              op: 'a'\n            });\n          });\n        } else {\n          updates.push({\n            param: param,\n            value: value,\n            op: 'a'\n          });\n        }\n      });\n      return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 's'\n      });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(param, value) {\n      return this.clone({\n        param: param,\n        value: value,\n        op: 'd'\n      });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var _this6 = this;\n\n      this.init();\n      return this.keys().map(function (key) {\n        var eKey = _this6.encoder.encodeKey(key); // `a: ['1']` produces `'a=1'`\n        // `b: []` produces `''`\n        // `c: ['1', '2']` produces `'c=1&c=2'`\n\n\n        return _this6.map.get(key).map(function (value) {\n          return eKey + '=' + _this6.encoder.encodeValue(value);\n        }).join('&');\n      }) // filter out empty values because `b: []` produces `''`\n      // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n      .filter(function (param) {\n        return param !== '';\n      }).join('&');\n    }\n  }, {\n    key: \"clone\",\n    value: function clone(update) {\n      var clone = new HttpParams({\n        encoder: this.encoder\n      });\n      clone.cloneFrom = this.cloneFrom || this;\n      clone.updates = (this.updates || []).concat(update);\n      return clone;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _this7 = this;\n\n      if (this.map === null) {\n        this.map = new Map();\n      }\n\n      if (this.cloneFrom !== null) {\n        this.cloneFrom.init();\n        this.cloneFrom.keys().forEach(function (key) {\n          return _this7.map.set(key, _this7.cloneFrom.map.get(key));\n        });\n        this.updates.forEach(function (update) {\n          switch (update.op) {\n            case 'a':\n            case 's':\n              var base = (update.op === 'a' ? _this7.map.get(update.param) : undefined) || [];\n              base.push(update.value);\n\n              _this7.map.set(update.param, base);\n\n              break;\n\n            case 'd':\n              if (update.value !== undefined) {\n                var _base = _this7.map.get(update.param) || [];\n\n                var idx = _base.indexOf(update.value);\n\n                if (idx !== -1) {\n                  _base.splice(idx, 1);\n                }\n\n                if (_base.length > 0) {\n                  _this7.map.set(update.param, _base);\n                } else {\n                  _this7.map.delete(update.param);\n                }\n              } else {\n                _this7.map.delete(update.param);\n\n                break;\n              }\n\n          }\n        });\n        this.cloneFrom = this.updates = null;\n      }\n    }\n  }]);\n\n  return HttpParams;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\n\n\nfunction mightHaveBody(method) {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n\n    default:\n      return true;\n  }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\n\n\nfunction isArrayBuffer(value) {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\n\n\nfunction isBlob(value) {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\n\n\nfunction isFormData(value) {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\n\n\nvar HttpRequest = /*#__PURE__*/function () {\n  function HttpRequest(method, url, third, fourth) {\n    _classCallCheck(this, HttpRequest);\n\n    this.url = url;\n    /**\n     * The request body, or `null` if one isn't set.\n     *\n     * Bodies are not enforced to be immutable, as they can include a reference to any\n     * user-defined data type. However, interceptors should take care to preserve\n     * idempotence by treating them as such.\n     */\n\n    this.body = null;\n    /**\n     * Whether this request should be made in a way that exposes progress events.\n     *\n     * Progress events are expensive (change detection runs on each event) and so\n     * they should only be requested if the consumer intends to monitor them.\n     */\n\n    this.reportProgress = false;\n    /**\n     * Whether this request should be sent with outgoing credentials (cookies).\n     */\n\n    this.withCredentials = false;\n    /**\n     * The expected response type of the server.\n     *\n     * This is used to parse the response appropriately before returning it to\n     * the requestee.\n     */\n\n    this.responseType = 'json';\n    this.method = method.toUpperCase(); // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n\n    var options; // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = third !== undefined ? third : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third;\n    } // If options have been passed, interpret them.\n\n\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials; // Override default response type of 'json' if one is provided.\n\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      } // Override headers if they're provided.\n\n\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    } // If no headers have been passed in, construct a new HttpHeaders instance.\n\n\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    } // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n\n\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      var params = this.params.toString();\n\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        var qIdx = url.indexOf('?'); // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n\n        var sep = qIdx === -1 ? '?' : qIdx < url.length - 1 ? '&' : '';\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n\n\n  _createClass(HttpRequest, [{\n    key: \"serializeBody\",\n    value: function serializeBody() {\n      // If no body is present, no need to serialize it.\n      if (this.body === null) {\n        return null;\n      } // Check whether the body is already in a serialized form. If so,\n      // it can just be returned directly.\n\n\n      if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || typeof this.body === 'string') {\n        return this.body;\n      } // Check whether the body is an instance of HttpUrlEncodedParams.\n\n\n      if (this.body instanceof HttpParams) {\n        return this.body.toString();\n      } // Check whether the body is an object or array, and serialize with JSON if so.\n\n\n      if (typeof this.body === 'object' || typeof this.body === 'boolean' || Array.isArray(this.body)) {\n        return JSON.stringify(this.body);\n      } // Fall back on toString() for everything else.\n\n\n      return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n\n  }, {\n    key: \"detectContentTypeHeader\",\n    value: function detectContentTypeHeader() {\n      // An empty body has no content type.\n      if (this.body === null) {\n        return null;\n      } // FormData bodies rely on the browser's content type assignment.\n\n\n      if (isFormData(this.body)) {\n        return null;\n      } // Blobs usually have their own content type. If it doesn't, then\n      // no type can be inferred.\n\n\n      if (isBlob(this.body)) {\n        return this.body.type || null;\n      } // Array buffers have unknown contents and thus no type can be inferred.\n\n\n      if (isArrayBuffer(this.body)) {\n        return null;\n      } // Technically, strings could be a form of JSON data, but it's safe enough\n      // to assume they're plain strings.\n\n\n      if (typeof this.body === 'string') {\n        return 'text/plain';\n      } // `HttpUrlEncodedParams` has its own content-type.\n\n\n      if (this.body instanceof HttpParams) {\n        return 'application/x-www-form-urlencoded;charset=UTF-8';\n      } // Arrays, objects, and numbers will be encoded as JSON.\n\n\n      if (typeof this.body === 'object' || typeof this.body === 'number' || Array.isArray(this.body)) {\n        return 'application/json';\n      } // No type could be inferred.\n\n\n      return null;\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // For method, url, and responseType, take the current value unless\n      // it is overridden in the update hash.\n      var method = update.method || this.method;\n      var url = update.url || this.url;\n      var responseType = update.responseType || this.responseType; // The body is somewhat special - a `null` value in update.body means\n      // whatever current body is present is being overridden with an empty\n      // body, whereas an `undefined` value in update.body implies no\n      // override.\n\n      var body = update.body !== undefined ? update.body : this.body; // Carefully handle the boolean options to differentiate between\n      // `false` and `undefined` in the update args.\n\n      var withCredentials = update.withCredentials !== undefined ? update.withCredentials : this.withCredentials;\n      var reportProgress = update.reportProgress !== undefined ? update.reportProgress : this.reportProgress; // Headers and params may be appended to if `setHeaders` or\n      // `setParams` are used.\n\n      var headers = update.headers || this.headers;\n      var params = update.params || this.params; // Check whether the caller has asked to add headers.\n\n      if (update.setHeaders !== undefined) {\n        // Set every requested header.\n        headers = Object.keys(update.setHeaders).reduce(function (headers, name) {\n          return headers.set(name, update.setHeaders[name]);\n        }, headers);\n      } // Check whether the caller has asked to set params.\n\n\n      if (update.setParams) {\n        // Set every requested param.\n        params = Object.keys(update.setParams).reduce(function (params, param) {\n          return params.set(param, update.setParams[param]);\n        }, params);\n      } // Finally, construct the new HttpRequest using the pieces from above.\n\n\n      return new HttpRequest(method, url, body, {\n        params: params,\n        headers: headers,\n        reportProgress: reportProgress,\n        responseType: responseType,\n        withCredentials: withCredentials\n      });\n    }\n  }]);\n\n  return HttpRequest;\n}();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\n\n\nvar HttpEventType;\n\n(function (HttpEventType) {\n  /**\n   * The request was sent out over the wire.\n   */\n  HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n  /**\n   * An upload progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n  /**\n   * The response status code and headers were received.\n   */\n\n  HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n  /**\n   * A download progress event was received.\n   */\n\n  HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n  /**\n   * The full response including the body was received.\n   */\n\n  HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n\n  HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\n\n\nvar HttpResponseBase =\n/**\n * Super-constructor for all responses.\n *\n * The single parameter accepted is an initialization hash. Any properties\n * of the response passed there will override the default values.\n */\nfunction HttpResponseBase(init) {\n  var defaultStatus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  var defaultStatusText = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'OK';\n\n  _classCallCheck(this, HttpResponseBase);\n\n  // If the hash has values passed, use them to initialize the response.\n  // Otherwise use the default values.\n  this.headers = init.headers || new HttpHeaders();\n  this.status = init.status !== undefined ? init.status : defaultStatus;\n  this.statusText = init.statusText || defaultStatusText;\n  this.url = init.url || null; // Cache the ok value to avoid defining a getter.\n\n  this.ok = this.status >= 200 && this.status < 300;\n};\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\n\n\nvar HttpHeaderResponse = /*#__PURE__*/function (_HttpResponseBase) {\n  _inherits(HttpHeaderResponse, _HttpResponseBase);\n\n  var _super = _createSuper(HttpHeaderResponse);\n\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  function HttpHeaderResponse() {\n    var _this8;\n\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpHeaderResponse);\n\n    _this8 = _super.call(this, init);\n    _this8.type = HttpEventType.ResponseHeader;\n    return _this8;\n  }\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n\n\n  _createClass(HttpHeaderResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // Perform a straightforward initialization of the new HttpHeaderResponse,\n      // overriding the current parameters with new ones if given.\n      return new HttpHeaderResponse({\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n\n  return HttpHeaderResponse;\n}(HttpResponseBase);\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\n\n\nvar HttpResponse = /*#__PURE__*/function (_HttpResponseBase2) {\n  _inherits(HttpResponse, _HttpResponseBase2);\n\n  var _super2 = _createSuper(HttpResponse);\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  function HttpResponse() {\n    var _this9;\n\n    var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, HttpResponse);\n\n    _this9 = _super2.call(this, init);\n    _this9.type = HttpEventType.Response;\n    _this9.body = init.body !== undefined ? init.body : null;\n    return _this9;\n  }\n\n  _createClass(HttpResponse, [{\n    key: \"clone\",\n    value: function clone() {\n      var update = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return new HttpResponse({\n        body: update.body !== undefined ? update.body : this.body,\n        headers: update.headers || this.headers,\n        status: update.status !== undefined ? update.status : this.status,\n        statusText: update.statusText || this.statusText,\n        url: update.url || this.url || undefined\n      });\n    }\n  }]);\n\n  return HttpResponse;\n}(HttpResponseBase);\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\n\n\nvar HttpErrorResponse = /*#__PURE__*/function (_HttpResponseBase3) {\n  _inherits(HttpErrorResponse, _HttpResponseBase3);\n\n  var _super3 = _createSuper(HttpErrorResponse);\n\n  function HttpErrorResponse(init) {\n    var _this10;\n\n    _classCallCheck(this, HttpErrorResponse);\n\n    // Initialize with a default status of 0 / Unknown Error.\n    _this10 = _super3.call(this, init, 0, 'Unknown Error');\n    _this10.name = 'HttpErrorResponse';\n    /**\n     * Errors are never okay, even when the status code is in the 2xx success range.\n     */\n\n    _this10.ok = false; // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n\n    if (_this10.status >= 200 && _this10.status < 300) {\n      _this10.message = \"Http failure during parsing for \".concat(init.url || '(unknown url)');\n    } else {\n      _this10.message = \"Http failure response for \".concat(init.url || '(unknown url)', \": \").concat(init.status, \" \").concat(init.statusText);\n    }\n\n    _this10.error = init.error || null;\n    return _this10;\n  }\n\n  return HttpErrorResponse;\n}(HttpResponseBase);\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\n\n\nfunction addBody(options, body) {\n  return {\n    body: body,\n    headers: options.headers,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials\n  };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\n\n\nvar HttpClient = /*#__PURE__*/function () {\n  function HttpClient(handler) {\n    _classCallCheck(this, HttpClient);\n\n    this.handler = handler;\n  }\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n\n\n  _createClass(HttpClient, [{\n    key: \"request\",\n    value: function request(first, url) {\n      var _this11 = this;\n\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      var req; // First, check whether the primary argument is an instance of `HttpRequest`.\n\n      if (first instanceof HttpRequest) {\n        // It is. The other arguments must be undefined (per the signatures) and can be\n        // ignored.\n        req = first;\n      } else {\n        // It's a string, so it represents a URL. Construct a request based on it,\n        // and incorporate the remaining arguments (assuming `GET` unless a method is\n        // provided.\n        // Figure out the headers.\n        var headers = undefined;\n\n        if (options.headers instanceof HttpHeaders) {\n          headers = options.headers;\n        } else {\n          headers = new HttpHeaders(options.headers);\n        } // Sort out parameters.\n\n\n        var params = undefined;\n\n        if (!!options.params) {\n          if (options.params instanceof HttpParams) {\n            params = options.params;\n          } else {\n            params = new HttpParams({\n              fromObject: options.params\n            });\n          }\n        } // Construct the request.\n\n\n        req = new HttpRequest(first, url, options.body !== undefined ? options.body : null, {\n          headers: headers,\n          params: params,\n          reportProgress: options.reportProgress,\n          // By default, JSON is assumed to be returned for all calls.\n          responseType: options.responseType || 'json',\n          withCredentials: options.withCredentials\n        });\n      } // Start with an Observable.of() the initial request, and run the handler (which\n      // includes all interceptors) inside a concatMap(). This way, the handler runs\n      // inside an Observable chain, which causes interceptors to be re-run on every\n      // subscription (this also makes retries re-run the handler, including interceptors).\n\n\n      var events$ = of(req).pipe(concatMap(function (req) {\n        return _this11.handler.handle(req);\n      })); // If coming via the API signature which accepts a previously constructed HttpRequest,\n      // the only option is to get the event stream. Otherwise, return the event stream if\n      // that is what was requested.\n\n      if (first instanceof HttpRequest || options.observe === 'events') {\n        return events$;\n      } // The requested stream contains either the full response or the body. In either\n      // case, the first step is to filter the event stream to extract a stream of\n      // responses(s).\n\n\n      var res$ = events$.pipe(filter(function (event) {\n        return event instanceof HttpResponse;\n      })); // Decide which stream to return.\n\n      switch (options.observe || 'body') {\n        case 'body':\n          // The requested stream is the body. Map the response stream to the response\n          // body. This could be done more simply, but a misbehaving interceptor might\n          // transform the response body into a different format and ignore the requested\n          // responseType. Guard against this by validating that the response is of the\n          // requested type.\n          switch (req.responseType) {\n            case 'arraybuffer':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is an ArrayBuffer.\n                if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                  throw new Error('Response is not an ArrayBuffer.');\n                }\n\n                return res.body;\n              }));\n\n            case 'blob':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is a Blob.\n                if (res.body !== null && !(res.body instanceof Blob)) {\n                  throw new Error('Response is not a Blob.');\n                }\n\n                return res.body;\n              }));\n\n            case 'text':\n              return res$.pipe(map(function (res) {\n                // Validate that the body is a string.\n                if (res.body !== null && typeof res.body !== 'string') {\n                  throw new Error('Response is not a string.');\n                }\n\n                return res.body;\n              }));\n\n            case 'json':\n            default:\n              // No validation needed for JSON responses, as they can be of any type.\n              return res$.pipe(map(function (res) {\n                return res.body;\n              }));\n          }\n\n        case 'response':\n          // The response stream was requested directly, so return it.\n          return res$;\n\n        default:\n          // Guard against new future observe types being added.\n          throw new Error(\"Unreachable: unhandled observe type \".concat(options.observe, \"}\"));\n      }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n\n  }, {\n    key: \"head\",\n    value: function head(url) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n\n  }, {\n    key: \"jsonp\",\n    value: function jsonp(url, callbackParam) {\n      return this.request('JSONP', url, {\n        params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n        observe: 'body',\n        responseType: 'json'\n      });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n\n  }, {\n    key: \"options\",\n    value: function options(url) {\n      var _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      return this.request('OPTIONS', url, _options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n\n  }, {\n    key: \"patch\",\n    value: function patch(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n\n  }, {\n    key: \"post\",\n    value: function post(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n\n  }, {\n    key: \"put\",\n    value: function put(url, body) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return this.request('PUT', url, addBody(options, body));\n    }\n  }]);\n\n  return HttpClient;\n}();\n\nHttpClient.ɵfac = function HttpClient_Factory(t) {\n  return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler));\n};\n\nHttpClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: HttpClient,\n  factory: HttpClient.ɵfac\n});\n\nHttpClient.ctorParameters = function () {\n  return [{\n    type: HttpHandler\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpHandler\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\n\n\nvar HttpInterceptorHandler = /*#__PURE__*/function () {\n  function HttpInterceptorHandler(next, interceptor) {\n    _classCallCheck(this, HttpInterceptorHandler);\n\n    this.next = next;\n    this.interceptor = interceptor;\n  }\n\n  _createClass(HttpInterceptorHandler, [{\n    key: \"handle\",\n    value: function handle(req) {\n      return this.interceptor.intercept(req, this.next);\n    }\n  }]);\n\n  return HttpInterceptorHandler;\n}();\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\n\n\nvar HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\n\nvar NoopInterceptor = /*#__PURE__*/function () {\n  function NoopInterceptor() {\n    _classCallCheck(this, NoopInterceptor);\n  }\n\n  _createClass(NoopInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      return next.handle(req);\n    }\n  }]);\n\n  return NoopInterceptor;\n}();\n\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) {\n  return new (t || NoopInterceptor)();\n};\n\nNoopInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: NoopInterceptor,\n  factory: NoopInterceptor.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\n\n\nvar nextRequestId = 0; // Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\n\nvar JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.'; // Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\n\nvar JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nvar JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\n\nvar JsonpCallbackContext = function JsonpCallbackContext() {\n  _classCallCheck(this, JsonpCallbackContext);\n};\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\n\n\nvar JsonpClientBackend = /*#__PURE__*/function () {\n  function JsonpClientBackend(callbackMap, document) {\n    _classCallCheck(this, JsonpClientBackend);\n\n    this.callbackMap = callbackMap;\n    this.document = document;\n    /**\n     * A resolved promise that can be used to schedule microtasks in the event handlers.\n     */\n\n    this.resolvedPromise = Promise.resolve();\n  }\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n\n\n  _createClass(JsonpClientBackend, [{\n    key: \"nextCallback\",\n    value: function nextCallback() {\n      return \"ng_jsonp_callback_\".concat(nextRequestId++);\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n\n  }, {\n    key: \"handle\",\n    value: function handle(req) {\n      var _this12 = this;\n\n      // Firstly, check both the method and response type. If either doesn't match\n      // then the request was improperly routed here and cannot be handled.\n      if (req.method !== 'JSONP') {\n        throw new Error(JSONP_ERR_WRONG_METHOD);\n      } else if (req.responseType !== 'json') {\n        throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n      } // Everything else happens inside the Observable boundary.\n\n\n      return new Observable(function (observer) {\n        // The first step to make a request is to generate the callback name, and replace the\n        // callback placeholder in the URL with the name. Care has to be taken here to ensure\n        // a trailing &, if matched, gets inserted back into the URL in the correct place.\n        var callback = _this12.nextCallback();\n\n        var url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, \"=\".concat(callback, \"$1\")); // Construct the <script> tag and point it at the URL.\n\n        var node = _this12.document.createElement('script');\n\n        node.src = url; // A JSONP request requires waiting for multiple callbacks. These variables\n        // are closed over and track state across those callbacks.\n        // The response object, if one has been received, or null otherwise.\n\n        var body = null; // Whether the response callback has been called.\n\n        var finished = false; // Whether the request has been cancelled (and thus any other callbacks)\n        // should be ignored.\n\n        var cancelled = false; // Set the response callback in this.callbackMap (which will be the window\n        // object in the browser. The script being loaded via the <script> tag will\n        // eventually call this callback.\n\n        _this12.callbackMap[callback] = function (data) {\n          // Data has been received from the JSONP script. Firstly, delete this callback.\n          delete _this12.callbackMap[callback]; // Next, make sure the request wasn't cancelled in the meantime.\n\n          if (cancelled) {\n            return;\n          } // Set state to indicate data was received.\n\n\n          body = data;\n          finished = true;\n        }; // cleanup() is a utility closure that removes the <script> from the page and\n        // the response callback from the window. This logic is used in both the\n        // success, error, and cancellation paths, so it's extracted out for convenience.\n\n\n        var cleanup = function cleanup() {\n          // Remove the <script> tag if it's still on the page.\n          if (node.parentNode) {\n            node.parentNode.removeChild(node);\n          } // Remove the response callback from the callbackMap (window object in the\n          // browser).\n\n\n          delete _this12.callbackMap[callback];\n        }; // onLoad() is the success callback which runs after the response callback\n        // if the JSONP script loads successfully. The event itself is unimportant.\n        // If something went wrong, onLoad() may run without the response callback\n        // having been invoked.\n\n\n        var onLoad = function onLoad(event) {\n          // Do nothing if the request has been cancelled.\n          if (cancelled) {\n            return;\n          } // We wrap it in an extra Promise, to ensure the microtask\n          // is scheduled after the loaded endpoint has executed any potential microtask itself,\n          // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n\n\n          _this12.resolvedPromise.then(function () {\n            // Cleanup the page.\n            cleanup(); // Check whether the response callback has run.\n\n            if (!finished) {\n              // It hasn't, something went wrong with the request. Return an error via\n              // the Observable error path. All JSONP errors have status 0.\n              observer.error(new HttpErrorResponse({\n                url: url,\n                status: 0,\n                statusText: 'JSONP Error',\n                error: new Error(JSONP_ERR_NO_CALLBACK)\n              }));\n              return;\n            } // Success. body either contains the response body or null if none was\n            // returned.\n\n\n            observer.next(new HttpResponse({\n              body: body,\n              status: 200,\n              statusText: 'OK',\n              url: url\n            })); // Complete the stream, the response is over.\n\n            observer.complete();\n          });\n        }; // onError() is the error callback, which runs if the script returned generates\n        // a Javascript error. It emits the error via the Observable error channel as\n        // a HttpErrorResponse.\n\n\n        var onError = function onError(error) {\n          // If the request was already cancelled, no need to emit anything.\n          if (cancelled) {\n            return;\n          }\n\n          cleanup(); // Wrap the error in a HttpErrorResponse.\n\n          observer.error(new HttpErrorResponse({\n            error: error,\n            status: 0,\n            statusText: 'JSONP Error',\n            url: url\n          }));\n        }; // Subscribe to both the success (load) and error events on the <script> tag,\n        // and add it to the page.\n\n\n        node.addEventListener('load', onLoad);\n        node.addEventListener('error', onError);\n\n        _this12.document.body.appendChild(node); // The request has now been successfully sent.\n\n\n        observer.next({\n          type: HttpEventType.Sent\n        }); // Cancellation handler.\n\n        return function () {\n          // Track the cancellation so event listeners won't do anything even if already scheduled.\n          cancelled = true; // Remove the event listeners so they won't run if the events later fire.\n\n          node.removeEventListener('load', onLoad);\n          node.removeEventListener('error', onError); // And finally, clean up the page.\n\n          cleanup();\n        };\n      });\n    }\n  }]);\n\n  return JsonpClientBackend;\n}();\n\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) {\n  return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT));\n};\n\nJsonpClientBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: JsonpClientBackend,\n  factory: JsonpClientBackend.ɵfac\n});\n\nJsonpClientBackend.ctorParameters = function () {\n  return [{\n    type: JsonpCallbackContext\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpCallbackContext\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\n\n\nvar JsonpInterceptor = /*#__PURE__*/function () {\n  function JsonpInterceptor(jsonp) {\n    _classCallCheck(this, JsonpInterceptor);\n\n    this.jsonp = jsonp;\n  }\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n\n\n  _createClass(JsonpInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      if (req.method === 'JSONP') {\n        return this.jsonp.handle(req);\n      } // Fall through for normal HTTP requests.\n\n\n      return next.handle(req);\n    }\n  }]);\n\n  return JsonpInterceptor;\n}();\n\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) {\n  return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend));\n};\n\nJsonpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: JsonpInterceptor,\n  factory: JsonpInterceptor.ɵfac\n});\n\nJsonpInterceptor.ctorParameters = function () {\n  return [{\n    type: JsonpClientBackend\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: JsonpClientBackend\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\n\nfunction getResponseUrl(xhr) {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n\n  return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\n\n\nvar XhrFactory = function XhrFactory() {\n  _classCallCheck(this, XhrFactory);\n};\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\n\n\nvar BrowserXhr = /*#__PURE__*/function () {\n  function BrowserXhr() {\n    _classCallCheck(this, BrowserXhr);\n  }\n\n  _createClass(BrowserXhr, [{\n    key: \"build\",\n    value: function build() {\n      return new XMLHttpRequest();\n    }\n  }]);\n\n  return BrowserXhr;\n}();\n\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) {\n  return new (t || BrowserXhr)();\n};\n\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: BrowserXhr,\n  factory: BrowserXhr.ɵfac\n});\n\nBrowserXhr.ctorParameters = function () {\n  return [];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n    type: Injectable\n  }], function () {\n    return [];\n  }, null);\n})();\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n\n\nvar HttpXhrBackend = /*#__PURE__*/function () {\n  function HttpXhrBackend(xhrFactory) {\n    _classCallCheck(this, HttpXhrBackend);\n\n    this.xhrFactory = xhrFactory;\n  }\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n\n\n  _createClass(HttpXhrBackend, [{\n    key: \"handle\",\n    value: function handle(req) {\n      var _this13 = this;\n\n      // Quick check to give a better error message when a user attempts to use\n      // HttpClient.jsonp() without installing the HttpClientJsonpModule\n      if (req.method === 'JSONP') {\n        throw new Error(\"Attempted to construct Jsonp request without HttpClientJsonpModule installed.\");\n      } // Everything happens on Observable subscription.\n\n\n      return new Observable(function (observer) {\n        // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n        var xhr = _this13.xhrFactory.build();\n\n        xhr.open(req.method, req.urlWithParams);\n\n        if (!!req.withCredentials) {\n          xhr.withCredentials = true;\n        } // Add all the requested headers.\n\n\n        req.headers.forEach(function (name, values) {\n          return xhr.setRequestHeader(name, values.join(','));\n        }); // Add an Accept header if one isn't present already.\n\n        if (!req.headers.has('Accept')) {\n          xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n        } // Auto-detect the Content-Type header if one isn't present already.\n\n\n        if (!req.headers.has('Content-Type')) {\n          var detectedType = req.detectContentTypeHeader(); // Sometimes Content-Type detection fails.\n\n          if (detectedType !== null) {\n            xhr.setRequestHeader('Content-Type', detectedType);\n          }\n        } // Set the responseType if one was requested.\n\n\n        if (req.responseType) {\n          var responseType = req.responseType.toLowerCase(); // JSON responses need to be processed as text. This is because if the server\n          // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n          // xhr.response will be null, and xhr.responseText cannot be accessed to\n          // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n          // is parsed by first requesting text and then applying JSON.parse.\n\n          xhr.responseType = responseType !== 'json' ? responseType : 'text';\n        } // Serialize the request body if one is present. If not, this will be set to null.\n\n\n        var reqBody = req.serializeBody(); // If progress events are enabled, response headers will be delivered\n        // in two events - the HttpHeaderResponse event and the full HttpResponse\n        // event. However, since response headers don't change in between these\n        // two events, it doesn't make sense to parse them twice. So headerResponse\n        // caches the data extracted from the response whenever it's first parsed,\n        // to ensure parsing isn't duplicated.\n\n        var headerResponse = null; // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n        // state, and memoizes it into headerResponse.\n\n        var partialFromXhr = function partialFromXhr() {\n          if (headerResponse !== null) {\n            return headerResponse;\n          } // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n\n\n          var status = xhr.status === 1223 ? 204 : xhr.status;\n          var statusText = xhr.statusText || 'OK'; // Parse headers from XMLHttpRequest - this step is lazy.\n\n          var headers = new HttpHeaders(xhr.getAllResponseHeaders()); // Read the response URL from the XMLHttpResponse instance and fall back on the\n          // request URL.\n\n          var url = getResponseUrl(xhr) || req.url; // Construct the HttpHeaderResponse and memoize it.\n\n          headerResponse = new HttpHeaderResponse({\n            headers: headers,\n            status: status,\n            statusText: statusText,\n            url: url\n          });\n          return headerResponse;\n        }; // Next, a few closures are defined for the various events which XMLHttpRequest can\n        // emit. This allows them to be unregistered as event listeners later.\n        // First up is the load event, which represents a response being fully available.\n\n\n        var onLoad = function onLoad() {\n          // Read response state from the memoized partial data.\n          var _partialFromXhr = partialFromXhr(),\n              headers = _partialFromXhr.headers,\n              status = _partialFromXhr.status,\n              statusText = _partialFromXhr.statusText,\n              url = _partialFromXhr.url; // The body will be read out if present.\n\n\n          var body = null;\n\n          if (status !== 204) {\n            // Use XMLHttpRequest.response if set, responseText otherwise.\n            body = typeof xhr.response === 'undefined' ? xhr.responseText : xhr.response;\n          } // Normalize another potential bug (this one comes from CORS).\n\n\n          if (status === 0) {\n            status = !!body ? 200 : 0;\n          } // ok determines whether the response will be transmitted on the event or\n          // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n          // but a successful status code can still result in an error if the user\n          // asked for JSON data and the body cannot be parsed as such.\n\n\n          var ok = status >= 200 && status < 300; // Check whether the body needs to be parsed as JSON (in many cases the browser\n          // will have done that already).\n\n          if (req.responseType === 'json' && typeof body === 'string') {\n            // Save the original body, before attempting XSSI prefix stripping.\n            var originalBody = body;\n            body = body.replace(XSSI_PREFIX, '');\n\n            try {\n              // Attempt the parse. If it fails, a parse error should be delivered to the user.\n              body = body !== '' ? JSON.parse(body) : null;\n            } catch (error) {\n              // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n              // JSON response. Restore the original body (including any XSSI prefix) to deliver\n              // a better error response.\n              body = originalBody; // If this was an error request to begin with, leave it as a string, it probably\n              // just isn't JSON. Otherwise, deliver the parsing error to the user.\n\n              if (ok) {\n                // Even though the response status was 2xx, this is still an error.\n                ok = false; // The parse error contains the text of the body that failed to parse.\n\n                body = {\n                  error: error,\n                  text: body\n                };\n              }\n            }\n          }\n\n          if (ok) {\n            // A successful response is delivered on the event stream.\n            observer.next(new HttpResponse({\n              body: body,\n              headers: headers,\n              status: status,\n              statusText: statusText,\n              url: url || undefined\n            })); // The full body has been received and delivered, no further events\n            // are possible. This request is complete.\n\n            observer.complete();\n          } else {\n            // An unsuccessful request is delivered on the error channel.\n            observer.error(new HttpErrorResponse({\n              // The error in this case is the response body (error from the server).\n              error: body,\n              headers: headers,\n              status: status,\n              statusText: statusText,\n              url: url || undefined\n            }));\n          }\n        }; // The onError callback is called when something goes wrong at the network level.\n        // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n        // transmitted on the error channel.\n\n\n        var onError = function onError(error) {\n          var _partialFromXhr2 = partialFromXhr(),\n              url = _partialFromXhr2.url;\n\n          var res = new HttpErrorResponse({\n            error: error,\n            status: xhr.status || 0,\n            statusText: xhr.statusText || 'Unknown Error',\n            url: url || undefined\n          });\n          observer.error(res);\n        }; // The sentHeaders flag tracks whether the HttpResponseHeaders event\n        // has been sent on the stream. This is necessary to track if progress\n        // is enabled since the event will be sent on only the first download\n        // progerss event.\n\n\n        var sentHeaders = false; // The download progress event handler, which is only registered if\n        // progress events are enabled.\n\n        var onDownProgress = function onDownProgress(event) {\n          // Send the HttpResponseHeaders event if it hasn't been sent already.\n          if (!sentHeaders) {\n            observer.next(partialFromXhr());\n            sentHeaders = true;\n          } // Start building the download progress event to deliver on the response\n          // event stream.\n\n\n          var progressEvent = {\n            type: HttpEventType.DownloadProgress,\n            loaded: event.loaded\n          }; // Set the total number of bytes in the event if it's available.\n\n          if (event.lengthComputable) {\n            progressEvent.total = event.total;\n          } // If the request was for text content and a partial response is\n          // available on XMLHttpRequest, include it in the progress event\n          // to allow for streaming reads.\n\n\n          if (req.responseType === 'text' && !!xhr.responseText) {\n            progressEvent.partialText = xhr.responseText;\n          } // Finally, fire the event.\n\n\n          observer.next(progressEvent);\n        }; // The upload progress event handler, which is only registered if\n        // progress events are enabled.\n\n\n        var onUpProgress = function onUpProgress(event) {\n          // Upload progress events are simpler. Begin building the progress\n          // event.\n          var progress = {\n            type: HttpEventType.UploadProgress,\n            loaded: event.loaded\n          }; // If the total number of bytes being uploaded is available, include\n          // it.\n\n          if (event.lengthComputable) {\n            progress.total = event.total;\n          } // Send the event.\n\n\n          observer.next(progress);\n        }; // By default, register for load and error events.\n\n\n        xhr.addEventListener('load', onLoad);\n        xhr.addEventListener('error', onError);\n        xhr.addEventListener('timeout', onError);\n        xhr.addEventListener('abort', onError); // Progress events are only enabled if requested.\n\n        if (req.reportProgress) {\n          // Download progress is always enabled if requested.\n          xhr.addEventListener('progress', onDownProgress); // Upload progress depends on whether there is a body to upload.\n\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.addEventListener('progress', onUpProgress);\n          }\n        } // Fire the request, and notify the event stream that it was fired.\n\n\n        xhr.send(reqBody);\n        observer.next({\n          type: HttpEventType.Sent\n        }); // This is the return from the Observable function, which is the\n        // request cancellation handler.\n\n        return function () {\n          // On a cancellation, remove all registered event listeners.\n          xhr.removeEventListener('error', onError);\n          xhr.removeEventListener('abort', onError);\n          xhr.removeEventListener('load', onLoad);\n          xhr.removeEventListener('timeout', onError);\n\n          if (req.reportProgress) {\n            xhr.removeEventListener('progress', onDownProgress);\n\n            if (reqBody !== null && xhr.upload) {\n              xhr.upload.removeEventListener('progress', onUpProgress);\n            }\n          } // Finally, abort the in-flight request.\n\n\n          if (xhr.readyState !== xhr.DONE) {\n            xhr.abort();\n          }\n        };\n      });\n    }\n  }]);\n\n  return HttpXhrBackend;\n}();\n\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) {\n  return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory));\n};\n\nHttpXhrBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: HttpXhrBackend,\n  factory: HttpXhrBackend.ɵfac\n});\n\nHttpXhrBackend.ctorParameters = function () {\n  return [{\n    type: XhrFactory\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: XhrFactory\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n\nvar XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nvar XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\n\nvar HttpXsrfTokenExtractor = function HttpXsrfTokenExtractor() {\n  _classCallCheck(this, HttpXsrfTokenExtractor);\n};\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n\n\nvar HttpXsrfCookieExtractor = /*#__PURE__*/function () {\n  function HttpXsrfCookieExtractor(doc, platform, cookieName) {\n    _classCallCheck(this, HttpXsrfCookieExtractor);\n\n    this.doc = doc;\n    this.platform = platform;\n    this.cookieName = cookieName;\n    this.lastCookieString = '';\n    this.lastToken = null;\n    /**\n     * @internal for testing\n     */\n\n    this.parseCount = 0;\n  }\n\n  _createClass(HttpXsrfCookieExtractor, [{\n    key: \"getToken\",\n    value: function getToken() {\n      if (this.platform === 'server') {\n        return null;\n      }\n\n      var cookieString = this.doc.cookie || '';\n\n      if (cookieString !== this.lastCookieString) {\n        this.parseCount++;\n        this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n        this.lastCookieString = cookieString;\n      }\n\n      return this.lastToken;\n    }\n  }]);\n\n  return HttpXsrfCookieExtractor;\n}();\n\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) {\n  return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME));\n};\n\nHttpXsrfCookieExtractor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: HttpXsrfCookieExtractor,\n  factory: HttpXsrfCookieExtractor.ɵfac\n});\n\nHttpXsrfCookieExtractor.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [XSRF_COOKIE_NAME]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_COOKIE_NAME]\n      }]\n    }];\n  }, null);\n})();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n\n\nvar HttpXsrfInterceptor = /*#__PURE__*/function () {\n  function HttpXsrfInterceptor(tokenService, headerName) {\n    _classCallCheck(this, HttpXsrfInterceptor);\n\n    this.tokenService = tokenService;\n    this.headerName = headerName;\n  }\n\n  _createClass(HttpXsrfInterceptor, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      var lcUrl = req.url.toLowerCase(); // Skip both non-mutating requests and absolute URLs.\n      // Non-mutating requests don't require a token, and absolute URLs require special handling\n      // anyway as the cookie set\n      // on our origin is not the same as the token expected by another origin.\n\n      if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') || lcUrl.startsWith('https://')) {\n        return next.handle(req);\n      }\n\n      var token = this.tokenService.getToken(); // Be careful not to overwrite an existing header of the same name.\n\n      if (token !== null && !req.headers.has(this.headerName)) {\n        req = req.clone({\n          headers: req.headers.set(this.headerName, token)\n        });\n      }\n\n      return next.handle(req);\n    }\n  }]);\n\n  return HttpXsrfInterceptor;\n}();\n\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) {\n  return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME));\n};\n\nHttpXsrfInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: HttpXsrfInterceptor,\n  factory: HttpXsrfInterceptor.ɵfac\n});\n\nHttpXsrfInterceptor.ctorParameters = function () {\n  return [{\n    type: HttpXsrfTokenExtractor\n  }, {\n    type: String,\n    decorators: [{\n      type: Inject,\n      args: [XSRF_HEADER_NAME]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpXsrfTokenExtractor\n    }, {\n      type: String,\n      decorators: [{\n        type: Inject,\n        args: [XSRF_HEADER_NAME]\n      }]\n    }];\n  }, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n\n\nvar HttpInterceptingHandler = /*#__PURE__*/function () {\n  function HttpInterceptingHandler(backend, injector) {\n    _classCallCheck(this, HttpInterceptingHandler);\n\n    this.backend = backend;\n    this.injector = injector;\n    this.chain = null;\n  }\n\n  _createClass(HttpInterceptingHandler, [{\n    key: \"handle\",\n    value: function handle(req) {\n      if (this.chain === null) {\n        var interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n        this.chain = interceptors.reduceRight(function (next, interceptor) {\n          return new HttpInterceptorHandler(next, interceptor);\n        }, this.backend);\n      }\n\n      return this.chain.handle(req);\n    }\n  }]);\n\n  return HttpInterceptingHandler;\n}();\n\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) {\n  return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n};\n\nHttpInterceptingHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: HttpInterceptingHandler,\n  factory: HttpInterceptingHandler.ɵfac\n});\n\nHttpInterceptingHandler.ctorParameters = function () {\n  return [{\n    type: HttpBackend\n  }, {\n    type: Injector\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: HttpBackend\n    }, {\n      type: ɵngcc0.Injector\n    }];\n  }, null);\n})();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\n\n\nfunction interceptingHandler(backend) {\n  var interceptors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!interceptors) {\n    return backend;\n  }\n\n  return interceptors.reduceRight(function (next, interceptor) {\n    return new HttpInterceptorHandler(next, interceptor);\n  }, backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\n\n\nfunction jsonpCallbackContext() {\n  if (typeof window === 'object') {\n    return window;\n  }\n\n  return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n\n\nvar HttpClientXsrfModule = /*#__PURE__*/function () {\n  function HttpClientXsrfModule() {\n    _classCallCheck(this, HttpClientXsrfModule);\n  }\n\n  _createClass(HttpClientXsrfModule, null, [{\n    key: \"disable\",\n    value:\n    /**\n     * Disable the default XSRF protection.\n     */\n    function disable() {\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: [{\n          provide: HttpXsrfInterceptor,\n          useClass: NoopInterceptor\n        }]\n      };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n\n  }, {\n    key: \"withOptions\",\n    value: function withOptions() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return {\n        ngModule: HttpClientXsrfModule,\n        providers: [options.cookieName ? {\n          provide: XSRF_COOKIE_NAME,\n          useValue: options.cookieName\n        } : [], options.headerName ? {\n          provide: XSRF_HEADER_NAME,\n          useValue: options.headerName\n        } : []]\n      };\n    }\n  }]);\n\n  return HttpClientXsrfModule;\n}();\n\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) {\n  return new (t || HttpClientXsrfModule)();\n};\n\nHttpClientXsrfModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: HttpClientXsrfModule\n});\nHttpClientXsrfModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [HttpXsrfInterceptor, {\n    provide: HTTP_INTERCEPTORS,\n    useExisting: HttpXsrfInterceptor,\n    multi: true\n  }, {\n    provide: HttpXsrfTokenExtractor,\n    useClass: HttpXsrfCookieExtractor\n  }, {\n    provide: XSRF_COOKIE_NAME,\n    useValue: 'XSRF-TOKEN'\n  }, {\n    provide: XSRF_HEADER_NAME,\n    useValue: 'X-XSRF-TOKEN'\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n    type: NgModule,\n    args: [{\n      providers: [HttpXsrfInterceptor, {\n        provide: HTTP_INTERCEPTORS,\n        useExisting: HttpXsrfInterceptor,\n        multi: true\n      }, {\n        provide: HttpXsrfTokenExtractor,\n        useClass: HttpXsrfCookieExtractor\n      }, {\n        provide: XSRF_COOKIE_NAME,\n        useValue: 'XSRF-TOKEN'\n      }, {\n        provide: XSRF_HEADER_NAME,\n        useValue: 'X-XSRF-TOKEN'\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nvar HttpClientModule = function HttpClientModule() {\n  _classCallCheck(this, HttpClientModule);\n};\n\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) {\n  return new (t || HttpClientModule)();\n};\n\nHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: HttpClientModule\n});\nHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [HttpClient, {\n    provide: HttpHandler,\n    useClass: HttpInterceptingHandler\n  }, HttpXhrBackend, {\n    provide: HttpBackend,\n    useExisting: HttpXhrBackend\n  }, BrowserXhr, {\n    provide: XhrFactory,\n    useExisting: BrowserXhr\n  }],\n  imports: [[HttpClientXsrfModule.withOptions({\n    cookieName: 'XSRF-TOKEN',\n    headerName: 'X-XSRF-TOKEN'\n  })]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, {\n    imports: [HttpClientXsrfModule]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n    type: NgModule,\n    args: [{\n      /**\n       * Optional configuration for XSRF protection.\n       */\n      imports: [HttpClientXsrfModule.withOptions({\n        cookieName: 'XSRF-TOKEN',\n        headerName: 'X-XSRF-TOKEN'\n      })],\n\n      /**\n       * Configures the [dependency injector](guide/glossary#injector) where it is imported\n       * with supporting services for HTTP communications.\n       */\n      providers: [HttpClient, {\n        provide: HttpHandler,\n        useClass: HttpInterceptingHandler\n      }, HttpXhrBackend, {\n        provide: HttpBackend,\n        useExisting: HttpXhrBackend\n      }, BrowserXhr, {\n        provide: XhrFactory,\n        useExisting: BrowserXhr\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n\n\nvar HttpClientJsonpModule = function HttpClientJsonpModule() {\n  _classCallCheck(this, HttpClientJsonpModule);\n};\n\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) {\n  return new (t || HttpClientJsonpModule)();\n};\n\nHttpClientJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: HttpClientJsonpModule\n});\nHttpClientJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [JsonpClientBackend, {\n    provide: JsonpCallbackContext,\n    useFactory: jsonpCallbackContext\n  }, {\n    provide: HTTP_INTERCEPTORS,\n    useClass: JsonpInterceptor,\n    multi: true\n  }]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n    type: NgModule,\n    args: [{\n      providers: [JsonpClientBackend, {\n        provide: JsonpCallbackContext,\n        useFactory: jsonpCallbackContext\n      }, {\n        provide: HTTP_INTERCEPTORS,\n        useClass: JsonpInterceptor,\n        multi: true\n      }]\n    }]\n  }], null, null);\n})();\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h }; //# sourceMappingURL=http.js.map","map":{"version":3,"sources":["/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@angular/common/__ivy_ngcc__/fesm2015/http.js"],"names":["Injectable","InjectionToken","Inject","PLATFORM_ID","Injector","NgModule","of","Observable","concatMap","filter","map","DOCUMENT","ɵparseCookieValue","ɵngcc0","HttpHandler","HttpBackend","HttpHeaders","headers","normalizedNames","Map","lazyUpdate","lazyInit","split","forEach","line","index","indexOf","name","slice","key","toLowerCase","value","trim","maybeSetNormalizedName","has","get","push","set","Object","keys","values","length","init","Array","from","clone","op","lcName","copyFrom","update","applyUpdate","other","concat","base","undefined","toDelete","delete","existing","fn","HttpUrlEncodingCodec","standardEncoding","decodeURIComponent","paramParser","rawParams","codec","params","replace","param","eqIdx","decodeKey","decodeValue","val","list","v","encodeURIComponent","HttpParams","options","updates","cloneFrom","encoder","fromString","fromObject","Error","isArray","res","_value","eKey","encodeKey","encodeValue","join","idx","splice","mightHaveBody","method","isArrayBuffer","ArrayBuffer","isBlob","Blob","isFormData","FormData","HttpRequest","url","third","fourth","body","reportProgress","withCredentials","responseType","toUpperCase","urlWithParams","toString","qIdx","sep","JSON","stringify","type","setHeaders","reduce","setParams","HttpEventType","HttpResponseBase","defaultStatus","defaultStatusText","status","statusText","ok","HttpHeaderResponse","ResponseHeader","HttpResponse","Response","HttpErrorResponse","message","error","addBody","observe","HttpClient","handler","first","req","events$","pipe","handle","res$","event","request","callbackParam","append","ɵfac","HttpClient_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ctorParameters","ngDevMode","ɵsetClassMetadata","HttpInterceptorHandler","next","interceptor","intercept","HTTP_INTERCEPTORS","NoopInterceptor","NoopInterceptor_Factory","nextRequestId","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONP_ERR_WRONG_RESPONSE_TYPE","JsonpCallbackContext","JsonpClientBackend","callbackMap","document","resolvedPromise","Promise","resolve","observer","callback","nextCallback","node","createElement","src","finished","cancelled","data","cleanup","parentNode","removeChild","onLoad","then","complete","onError","addEventListener","appendChild","Sent","removeEventListener","JsonpClientBackend_Factory","decorators","args","JsonpInterceptor","jsonp","JsonpInterceptor_Factory","XSSI_PREFIX","getResponseUrl","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","XhrFactory","BrowserXhr","XMLHttpRequest","BrowserXhr_Factory","HttpXhrBackend","xhrFactory","build","open","setRequestHeader","detectedType","detectContentTypeHeader","reqBody","serializeBody","headerResponse","partialFromXhr","response","responseText","originalBody","parse","text","sentHeaders","onDownProgress","progressEvent","DownloadProgress","loaded","lengthComputable","total","partialText","onUpProgress","progress","UploadProgress","upload","send","readyState","DONE","abort","HttpXhrBackend_Factory","XSRF_COOKIE_NAME","XSRF_HEADER_NAME","HttpXsrfTokenExtractor","HttpXsrfCookieExtractor","doc","platform","cookieName","lastCookieString","lastToken","parseCount","cookieString","cookie","HttpXsrfCookieExtractor_Factory","String","HttpXsrfInterceptor","tokenService","headerName","lcUrl","startsWith","getToken","HttpXsrfInterceptor_Factory","HttpInterceptingHandler","backend","injector","chain","interceptors","reduceRight","HttpInterceptingHandler_Factory","interceptingHandler","jsonpCallbackContext","window","HttpClientXsrfModule","ngModule","providers","provide","useClass","useValue","HttpClientXsrfModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","useExisting","multi","HttpClientModule","HttpClientModule_Factory","imports","withOptions","ngJitMode","ɵɵsetNgModuleScope","HttpClientJsonpModule","HttpClientJsonpModule_Factory","useFactory","ɵHttpInterceptingHandler","ɵangular_packages_common_http_http_a","ɵangular_packages_common_http_http_b","ɵangular_packages_common_http_http_c","ɵangular_packages_common_http_http_d","ɵangular_packages_common_http_http_e","ɵangular_packages_common_http_http_f","ɵangular_packages_common_http_http_g","ɵangular_packages_common_http_http_h"],"mappings":"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","sourcesContent":["/**\n * @license Angular v11.2.6\n * (c) 2010-2021 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { Injectable, InjectionToken, Inject, PLATFORM_ID, Injector, NgModule } from '@angular/core';\nimport { of, Observable } from 'rxjs';\nimport { concatMap, filter, map } from 'rxjs/operators';\nimport { DOCUMENT, ɵparseCookieValue } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nimport * as ɵngcc0 from '@angular/core';\nclass HttpHandler {\n}\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nclass HttpBackend {\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nclass HttpHeaders {\n    /**  Constructs a new HTTP header object with the given values.*/\n    constructor(headers) {\n        /**\n         * Internal map of lowercased header names to the normalized\n         * form of the name (the form seen first).\n         */\n        this.normalizedNames = new Map();\n        /**\n         * Queued updates to be materialized the next initialization.\n         */\n        this.lazyUpdate = null;\n        if (!headers) {\n            this.headers = new Map();\n        }\n        else if (typeof headers === 'string') {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                headers.split('\\n').forEach(line => {\n                    const index = line.indexOf(':');\n                    if (index > 0) {\n                        const name = line.slice(0, index);\n                        const key = name.toLowerCase();\n                        const value = line.slice(index + 1).trim();\n                        this.maybeSetNormalizedName(name, key);\n                        if (this.headers.has(key)) {\n                            this.headers.get(key).push(value);\n                        }\n                        else {\n                            this.headers.set(key, [value]);\n                        }\n                    }\n                });\n            };\n        }\n        else {\n            this.lazyInit = () => {\n                this.headers = new Map();\n                Object.keys(headers).forEach(name => {\n                    let values = headers[name];\n                    const key = name.toLowerCase();\n                    if (typeof values === 'string') {\n                        values = [values];\n                    }\n                    if (values.length > 0) {\n                        this.headers.set(key, values);\n                        this.maybeSetNormalizedName(name, key);\n                    }\n                });\n            };\n        }\n    }\n    /**\n     * Checks for existence of a given header.\n     *\n     * @param name The header name to check for existence.\n     *\n     * @returns True if the header exists, false otherwise.\n     */\n    has(name) {\n        this.init();\n        return this.headers.has(name.toLowerCase());\n    }\n    /**\n     * Retrieves the first value of a given header.\n     *\n     * @param name The header name.\n     *\n     * @returns The value string if the header exists, null otherwise\n     */\n    get(name) {\n        this.init();\n        const values = this.headers.get(name.toLowerCase());\n        return values && values.length > 0 ? values[0] : null;\n    }\n    /**\n     * Retrieves the names of the headers.\n     *\n     * @returns A list of header names.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.normalizedNames.values());\n    }\n    /**\n     * Retrieves a list of values for a given header.\n     *\n     * @param name The header name from which to retrieve values.\n     *\n     * @returns A string of values if the header exists, null otherwise.\n     */\n    getAll(name) {\n        this.init();\n        return this.headers.get(name.toLowerCase()) || null;\n    }\n    /**\n     * Appends a new value to the existing set of values for a header\n     * and returns them in a clone of the original instance.\n     *\n     * @param name The header name for which to append the values.\n     * @param value The value to append.\n     *\n     * @returns A clone of the HTTP headers object with the value appended to the given header.\n     */\n    append(name, value) {\n        return this.clone({ name, value, op: 'a' });\n    }\n    /**\n     * Sets or modifies a value for a given header in a clone of the original instance.\n     * If the header already exists, its value is replaced with the given value\n     * in the returned object.\n     *\n     * @param name The header name.\n     * @param value The value or values to set or overide for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the newly set header value.\n     */\n    set(name, value) {\n        return this.clone({ name, value, op: 's' });\n    }\n    /**\n     * Deletes values for a given header in a clone of the original instance.\n     *\n     * @param name The header name.\n     * @param value The value or values to delete for the given header.\n     *\n     * @returns A clone of the HTTP headers object with the given value deleted.\n     */\n    delete(name, value) {\n        return this.clone({ name, value, op: 'd' });\n    }\n    maybeSetNormalizedName(name, lcName) {\n        if (!this.normalizedNames.has(lcName)) {\n            this.normalizedNames.set(lcName, name);\n        }\n    }\n    init() {\n        if (!!this.lazyInit) {\n            if (this.lazyInit instanceof HttpHeaders) {\n                this.copyFrom(this.lazyInit);\n            }\n            else {\n                this.lazyInit();\n            }\n            this.lazyInit = null;\n            if (!!this.lazyUpdate) {\n                this.lazyUpdate.forEach(update => this.applyUpdate(update));\n                this.lazyUpdate = null;\n            }\n        }\n    }\n    copyFrom(other) {\n        other.init();\n        Array.from(other.headers.keys()).forEach(key => {\n            this.headers.set(key, other.headers.get(key));\n            this.normalizedNames.set(key, other.normalizedNames.get(key));\n        });\n    }\n    clone(update) {\n        const clone = new HttpHeaders();\n        clone.lazyInit =\n            (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n        clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n        return clone;\n    }\n    applyUpdate(update) {\n        const key = update.name.toLowerCase();\n        switch (update.op) {\n            case 'a':\n            case 's':\n                let value = update.value;\n                if (typeof value === 'string') {\n                    value = [value];\n                }\n                if (value.length === 0) {\n                    return;\n                }\n                this.maybeSetNormalizedName(update.name, key);\n                const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n                base.push(...value);\n                this.headers.set(key, base);\n                break;\n            case 'd':\n                const toDelete = update.value;\n                if (!toDelete) {\n                    this.headers.delete(key);\n                    this.normalizedNames.delete(key);\n                }\n                else {\n                    let existing = this.headers.get(key);\n                    if (!existing) {\n                        return;\n                    }\n                    existing = existing.filter(value => toDelete.indexOf(value) === -1);\n                    if (existing.length === 0) {\n                        this.headers.delete(key);\n                        this.normalizedNames.delete(key);\n                    }\n                    else {\n                        this.headers.set(key, existing);\n                    }\n                }\n                break;\n        }\n    }\n    /**\n     * @internal\n     */\n    forEach(fn) {\n        this.init();\n        Array.from(this.normalizedNames.keys())\n            .forEach(key => fn(this.normalizedNames.get(key), this.headers.get(key)));\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nclass HttpUrlEncodingCodec {\n    /**\n     * Encodes a key name for a URL parameter or query-string.\n     * @param key The key name.\n     * @returns The encoded key name.\n     */\n    encodeKey(key) {\n        return standardEncoding(key);\n    }\n    /**\n     * Encodes the value of a URL parameter or query-string.\n     * @param value The value.\n     * @returns The encoded value.\n     */\n    encodeValue(value) {\n        return standardEncoding(value);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string key.\n     * @param key The encoded key name.\n     * @returns The decoded key name.\n     */\n    decodeKey(key) {\n        return decodeURIComponent(key);\n    }\n    /**\n     * Decodes an encoded URL parameter or query-string value.\n     * @param value The encoded value.\n     * @returns The decoded value.\n     */\n    decodeValue(value) {\n        return decodeURIComponent(value);\n    }\n}\nfunction paramParser(rawParams, codec) {\n    const map = new Map();\n    if (rawParams.length > 0) {\n        // The `window.location.search` can be used while creating an instance of the `HttpParams` class\n        // (e.g. `new HttpParams({ fromString: window.location.search })`). The `window.location.search`\n        // may start with the `?` char, so we strip it if it's present.\n        const params = rawParams.replace(/^\\?/, '').split('&');\n        params.forEach((param) => {\n            const eqIdx = param.indexOf('=');\n            const [key, val] = eqIdx == -1 ?\n                [codec.decodeKey(param), ''] :\n                [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n            const list = map.get(key) || [];\n            list.push(val);\n            map.set(key, list);\n        });\n    }\n    return map;\n}\nfunction standardEncoding(v) {\n    return encodeURIComponent(v)\n        .replace(/%40/gi, '@')\n        .replace(/%3A/gi, ':')\n        .replace(/%24/gi, '$')\n        .replace(/%2C/gi, ',')\n        .replace(/%3B/gi, ';')\n        .replace(/%2B/gi, '+')\n        .replace(/%3D/gi, '=')\n        .replace(/%3F/gi, '?')\n        .replace(/%2F/gi, '/');\n}\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nclass HttpParams {\n    constructor(options = {}) {\n        this.updates = null;\n        this.cloneFrom = null;\n        this.encoder = options.encoder || new HttpUrlEncodingCodec();\n        if (!!options.fromString) {\n            if (!!options.fromObject) {\n                throw new Error(`Cannot specify both fromString and fromObject.`);\n            }\n            this.map = paramParser(options.fromString, this.encoder);\n        }\n        else if (!!options.fromObject) {\n            this.map = new Map();\n            Object.keys(options.fromObject).forEach(key => {\n                const value = options.fromObject[key];\n                this.map.set(key, Array.isArray(value) ? value : [value]);\n            });\n        }\n        else {\n            this.map = null;\n        }\n    }\n    /**\n     * Reports whether the body includes one or more values for a given parameter.\n     * @param param The parameter name.\n     * @returns True if the parameter has one or more values,\n     * false if it has no value or is not present.\n     */\n    has(param) {\n        this.init();\n        return this.map.has(param);\n    }\n    /**\n     * Retrieves the first value for a parameter.\n     * @param param The parameter name.\n     * @returns The first value of the given parameter,\n     * or `null` if the parameter is not present.\n     */\n    get(param) {\n        this.init();\n        const res = this.map.get(param);\n        return !!res ? res[0] : null;\n    }\n    /**\n     * Retrieves all values for a  parameter.\n     * @param param The parameter name.\n     * @returns All values in a string array,\n     * or `null` if the parameter not present.\n     */\n    getAll(param) {\n        this.init();\n        return this.map.get(param) || null;\n    }\n    /**\n     * Retrieves all the parameters for this body.\n     * @returns The parameter names in a string array.\n     */\n    keys() {\n        this.init();\n        return Array.from(this.map.keys());\n    }\n    /**\n     * Appends a new value to existing values for a parameter.\n     * @param param The parameter name.\n     * @param value The new value to add.\n     * @return A new body with the appended value.\n     */\n    append(param, value) {\n        return this.clone({ param, value, op: 'a' });\n    }\n    /**\n     * Constructs a new body with appended values for the given parameter name.\n     * @param params parameters and values\n     * @return A new body with the new value.\n     */\n    appendAll(params) {\n        const updates = [];\n        Object.keys(params).forEach(param => {\n            const value = params[param];\n            if (Array.isArray(value)) {\n                value.forEach(_value => {\n                    updates.push({ param, value: _value, op: 'a' });\n                });\n            }\n            else {\n                updates.push({ param, value, op: 'a' });\n            }\n        });\n        return this.clone(updates);\n    }\n    /**\n     * Replaces the value for a parameter.\n     * @param param The parameter name.\n     * @param value The new value.\n     * @return A new body with the new value.\n     */\n    set(param, value) {\n        return this.clone({ param, value, op: 's' });\n    }\n    /**\n     * Removes a given value or all values from a parameter.\n     * @param param The parameter name.\n     * @param value The value to remove, if provided.\n     * @return A new body with the given value removed, or with all values\n     * removed if no value is specified.\n     */\n    delete(param, value) {\n        return this.clone({ param, value, op: 'd' });\n    }\n    /**\n     * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n     * separated by `&`s.\n     */\n    toString() {\n        this.init();\n        return this.keys()\n            .map(key => {\n            const eKey = this.encoder.encodeKey(key);\n            // `a: ['1']` produces `'a=1'`\n            // `b: []` produces `''`\n            // `c: ['1', '2']` produces `'c=1&c=2'`\n            return this.map.get(key).map(value => eKey + '=' + this.encoder.encodeValue(value))\n                .join('&');\n        })\n            // filter out empty values because `b: []` produces `''`\n            // which results in `a=1&&c=1&c=2` instead of `a=1&c=1&c=2` if we don't\n            .filter(param => param !== '')\n            .join('&');\n    }\n    clone(update) {\n        const clone = new HttpParams({ encoder: this.encoder });\n        clone.cloneFrom = this.cloneFrom || this;\n        clone.updates = (this.updates || []).concat(update);\n        return clone;\n    }\n    init() {\n        if (this.map === null) {\n            this.map = new Map();\n        }\n        if (this.cloneFrom !== null) {\n            this.cloneFrom.init();\n            this.cloneFrom.keys().forEach(key => this.map.set(key, this.cloneFrom.map.get(key)));\n            this.updates.forEach(update => {\n                switch (update.op) {\n                    case 'a':\n                    case 's':\n                        const base = (update.op === 'a' ? this.map.get(update.param) : undefined) || [];\n                        base.push(update.value);\n                        this.map.set(update.param, base);\n                        break;\n                    case 'd':\n                        if (update.value !== undefined) {\n                            let base = this.map.get(update.param) || [];\n                            const idx = base.indexOf(update.value);\n                            if (idx !== -1) {\n                                base.splice(idx, 1);\n                            }\n                            if (base.length > 0) {\n                                this.map.set(update.param, base);\n                            }\n                            else {\n                                this.map.delete(update.param);\n                            }\n                        }\n                        else {\n                            this.map.delete(update.param);\n                            break;\n                        }\n                }\n            });\n            this.cloneFrom = this.updates = null;\n        }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method) {\n    switch (method) {\n        case 'DELETE':\n        case 'GET':\n        case 'HEAD':\n        case 'OPTIONS':\n        case 'JSONP':\n            return false;\n        default:\n            return true;\n    }\n}\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value) {\n    return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value) {\n    return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value) {\n    return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nclass HttpRequest {\n    constructor(method, url, third, fourth) {\n        this.url = url;\n        /**\n         * The request body, or `null` if one isn't set.\n         *\n         * Bodies are not enforced to be immutable, as they can include a reference to any\n         * user-defined data type. However, interceptors should take care to preserve\n         * idempotence by treating them as such.\n         */\n        this.body = null;\n        /**\n         * Whether this request should be made in a way that exposes progress events.\n         *\n         * Progress events are expensive (change detection runs on each event) and so\n         * they should only be requested if the consumer intends to monitor them.\n         */\n        this.reportProgress = false;\n        /**\n         * Whether this request should be sent with outgoing credentials (cookies).\n         */\n        this.withCredentials = false;\n        /**\n         * The expected response type of the server.\n         *\n         * This is used to parse the response appropriately before returning it to\n         * the requestee.\n         */\n        this.responseType = 'json';\n        this.method = method.toUpperCase();\n        // Next, need to figure out which argument holds the HttpRequestInit\n        // options, if any.\n        let options;\n        // Check whether a body argument is expected. The only valid way to omit\n        // the body argument is to use a known no-body method like GET.\n        if (mightHaveBody(this.method) || !!fourth) {\n            // Body is the third argument, options are the fourth.\n            this.body = (third !== undefined) ? third : null;\n            options = fourth;\n        }\n        else {\n            // No body required, options are the third argument. The body stays null.\n            options = third;\n        }\n        // If options have been passed, interpret them.\n        if (options) {\n            // Normalize reportProgress and withCredentials.\n            this.reportProgress = !!options.reportProgress;\n            this.withCredentials = !!options.withCredentials;\n            // Override default response type of 'json' if one is provided.\n            if (!!options.responseType) {\n                this.responseType = options.responseType;\n            }\n            // Override headers if they're provided.\n            if (!!options.headers) {\n                this.headers = options.headers;\n            }\n            if (!!options.params) {\n                this.params = options.params;\n            }\n        }\n        // If no headers have been passed in, construct a new HttpHeaders instance.\n        if (!this.headers) {\n            this.headers = new HttpHeaders();\n        }\n        // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n        if (!this.params) {\n            this.params = new HttpParams();\n            this.urlWithParams = url;\n        }\n        else {\n            // Encode the parameters to a string in preparation for inclusion in the URL.\n            const params = this.params.toString();\n            if (params.length === 0) {\n                // No parameters, the visible URL is just the URL given at creation time.\n                this.urlWithParams = url;\n            }\n            else {\n                // Does the URL already have query parameters? Look for '?'.\n                const qIdx = url.indexOf('?');\n                // There are 3 cases to handle:\n                // 1) No existing parameters -> append '?' followed by params.\n                // 2) '?' exists and is followed by existing query string ->\n                //    append '&' followed by params.\n                // 3) '?' exists at the end of the url -> append params directly.\n                // This basically amounts to determining the character, if any, with\n                // which to join the URL and parameters.\n                const sep = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n                this.urlWithParams = url + sep + params;\n            }\n        }\n    }\n    /**\n     * Transform the free-form body into a serialized format suitable for\n     * transmission to the server.\n     */\n    serializeBody() {\n        // If no body is present, no need to serialize it.\n        if (this.body === null) {\n            return null;\n        }\n        // Check whether the body is already in a serialized form. If so,\n        // it can just be returned directly.\n        if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n            typeof this.body === 'string') {\n            return this.body;\n        }\n        // Check whether the body is an instance of HttpUrlEncodedParams.\n        if (this.body instanceof HttpParams) {\n            return this.body.toString();\n        }\n        // Check whether the body is an object or array, and serialize with JSON if so.\n        if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n            Array.isArray(this.body)) {\n            return JSON.stringify(this.body);\n        }\n        // Fall back on toString() for everything else.\n        return this.body.toString();\n    }\n    /**\n     * Examine the body and attempt to infer an appropriate MIME type\n     * for it.\n     *\n     * If no such type can be inferred, this method will return `null`.\n     */\n    detectContentTypeHeader() {\n        // An empty body has no content type.\n        if (this.body === null) {\n            return null;\n        }\n        // FormData bodies rely on the browser's content type assignment.\n        if (isFormData(this.body)) {\n            return null;\n        }\n        // Blobs usually have their own content type. If it doesn't, then\n        // no type can be inferred.\n        if (isBlob(this.body)) {\n            return this.body.type || null;\n        }\n        // Array buffers have unknown contents and thus no type can be inferred.\n        if (isArrayBuffer(this.body)) {\n            return null;\n        }\n        // Technically, strings could be a form of JSON data, but it's safe enough\n        // to assume they're plain strings.\n        if (typeof this.body === 'string') {\n            return 'text/plain';\n        }\n        // `HttpUrlEncodedParams` has its own content-type.\n        if (this.body instanceof HttpParams) {\n            return 'application/x-www-form-urlencoded;charset=UTF-8';\n        }\n        // Arrays, objects, and numbers will be encoded as JSON.\n        if (typeof this.body === 'object' || typeof this.body === 'number' ||\n            Array.isArray(this.body)) {\n            return 'application/json';\n        }\n        // No type could be inferred.\n        return null;\n    }\n    clone(update = {}) {\n        // For method, url, and responseType, take the current value unless\n        // it is overridden in the update hash.\n        const method = update.method || this.method;\n        const url = update.url || this.url;\n        const responseType = update.responseType || this.responseType;\n        // The body is somewhat special - a `null` value in update.body means\n        // whatever current body is present is being overridden with an empty\n        // body, whereas an `undefined` value in update.body implies no\n        // override.\n        const body = (update.body !== undefined) ? update.body : this.body;\n        // Carefully handle the boolean options to differentiate between\n        // `false` and `undefined` in the update args.\n        const withCredentials = (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n        const reportProgress = (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n        // Headers and params may be appended to if `setHeaders` or\n        // `setParams` are used.\n        let headers = update.headers || this.headers;\n        let params = update.params || this.params;\n        // Check whether the caller has asked to add headers.\n        if (update.setHeaders !== undefined) {\n            // Set every requested header.\n            headers =\n                Object.keys(update.setHeaders)\n                    .reduce((headers, name) => headers.set(name, update.setHeaders[name]), headers);\n        }\n        // Check whether the caller has asked to set params.\n        if (update.setParams) {\n            // Set every requested param.\n            params = Object.keys(update.setParams)\n                .reduce((params, param) => params.set(param, update.setParams[param]), params);\n        }\n        // Finally, construct the new HttpRequest using the pieces from above.\n        return new HttpRequest(method, url, body, {\n            params,\n            headers,\n            reportProgress,\n            responseType,\n            withCredentials,\n        });\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nvar HttpEventType;\n(function (HttpEventType) {\n    /**\n     * The request was sent out over the wire.\n     */\n    HttpEventType[HttpEventType[\"Sent\"] = 0] = \"Sent\";\n    /**\n     * An upload progress event was received.\n     */\n    HttpEventType[HttpEventType[\"UploadProgress\"] = 1] = \"UploadProgress\";\n    /**\n     * The response status code and headers were received.\n     */\n    HttpEventType[HttpEventType[\"ResponseHeader\"] = 2] = \"ResponseHeader\";\n    /**\n     * A download progress event was received.\n     */\n    HttpEventType[HttpEventType[\"DownloadProgress\"] = 3] = \"DownloadProgress\";\n    /**\n     * The full response including the body was received.\n     */\n    HttpEventType[HttpEventType[\"Response\"] = 4] = \"Response\";\n    /**\n     * A custom event from an interceptor or a backend.\n     */\n    HttpEventType[HttpEventType[\"User\"] = 5] = \"User\";\n})(HttpEventType || (HttpEventType = {}));\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nclass HttpResponseBase {\n    /**\n     * Super-constructor for all responses.\n     *\n     * The single parameter accepted is an initialization hash. Any properties\n     * of the response passed there will override the default values.\n     */\n    constructor(init, defaultStatus = 200, defaultStatusText = 'OK') {\n        // If the hash has values passed, use them to initialize the response.\n        // Otherwise use the default values.\n        this.headers = init.headers || new HttpHeaders();\n        this.status = init.status !== undefined ? init.status : defaultStatus;\n        this.statusText = init.statusText || defaultStatusText;\n        this.url = init.url || null;\n        // Cache the ok value to avoid defining a getter.\n        this.ok = this.status >= 200 && this.status < 300;\n    }\n}\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nclass HttpHeaderResponse extends HttpResponseBase {\n    /**\n     * Create a new `HttpHeaderResponse` with the given parameters.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.ResponseHeader;\n    }\n    /**\n     * Copy this `HttpHeaderResponse`, overriding its contents with the\n     * given parameter hash.\n     */\n    clone(update = {}) {\n        // Perform a straightforward initialization of the new HttpHeaderResponse,\n        // overriding the current parameters with new ones if given.\n        return new HttpHeaderResponse({\n            headers: update.headers || this.headers,\n            status: update.status !== undefined ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nclass HttpResponse extends HttpResponseBase {\n    /**\n     * Construct a new `HttpResponse`.\n     */\n    constructor(init = {}) {\n        super(init);\n        this.type = HttpEventType.Response;\n        this.body = init.body !== undefined ? init.body : null;\n    }\n    clone(update = {}) {\n        return new HttpResponse({\n            body: (update.body !== undefined) ? update.body : this.body,\n            headers: update.headers || this.headers,\n            status: (update.status !== undefined) ? update.status : this.status,\n            statusText: update.statusText || this.statusText,\n            url: update.url || this.url || undefined,\n        });\n    }\n}\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nclass HttpErrorResponse extends HttpResponseBase {\n    constructor(init) {\n        // Initialize with a default status of 0 / Unknown Error.\n        super(init, 0, 'Unknown Error');\n        this.name = 'HttpErrorResponse';\n        /**\n         * Errors are never okay, even when the status code is in the 2xx success range.\n         */\n        this.ok = false;\n        // If the response was successful, then this was a parse error. Otherwise, it was\n        // a protocol-level failure of some sort. Either the request failed in transit\n        // or the server returned an unsuccessful status code.\n        if (this.status >= 200 && this.status < 300) {\n            this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n        }\n        else {\n            this.message = `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n        }\n        this.error = init.error || null;\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody(options, body) {\n    return {\n        body,\n        headers: options.headers,\n        observe: options.observe,\n        params: options.params,\n        reportProgress: options.reportProgress,\n        responseType: options.responseType,\n        withCredentials: options.withCredentials,\n    };\n}\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n *\n * Alternatively, the parameter string can be used without invoking HttpParams\n * by directly joining to the URL.\n * ```\n * this.httpClient.request('GET', this.heroesUrl + '?' + 'name=term', {responseType:'json'});\n * ```\n *\n *\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n * @see [HTTP Request](api/common/http/HttpRequest)\n *\n * @publicApi\n */\nclass HttpClient {\n    constructor(handler) {\n        this.handler = handler;\n    }\n    /**\n     * Constructs an observable for a generic HTTP request that, when subscribed,\n     * fires the request through the chain of registered interceptors and on to the\n     * server.\n     *\n     * You can pass an `HttpRequest` directly as the only parameter. In this case,\n     * the call returns an observable of the raw `HttpEvent` stream.\n     *\n     * Alternatively you can pass an HTTP method as the first parameter,\n     * a URL string as the second, and an options hash containing the request body as the third.\n     * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n     * type of returned observable.\n     *   * The `responseType` value determines how a successful response body is parsed.\n     *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n     * object as a type parameter to the call.\n     *\n     * The `observe` value determines the return type, according to what you are interested in\n     * observing.\n     *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n     * progress events by default.\n     *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n     * where the `T` parameter depends on the `responseType` and any optionally provided type\n     * parameter.\n     *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n     *\n     */\n    request(first, url, options = {}) {\n        let req;\n        // First, check whether the primary argument is an instance of `HttpRequest`.\n        if (first instanceof HttpRequest) {\n            // It is. The other arguments must be undefined (per the signatures) and can be\n            // ignored.\n            req = first;\n        }\n        else {\n            // It's a string, so it represents a URL. Construct a request based on it,\n            // and incorporate the remaining arguments (assuming `GET` unless a method is\n            // provided.\n            // Figure out the headers.\n            let headers = undefined;\n            if (options.headers instanceof HttpHeaders) {\n                headers = options.headers;\n            }\n            else {\n                headers = new HttpHeaders(options.headers);\n            }\n            // Sort out parameters.\n            let params = undefined;\n            if (!!options.params) {\n                if (options.params instanceof HttpParams) {\n                    params = options.params;\n                }\n                else {\n                    params = new HttpParams({ fromObject: options.params });\n                }\n            }\n            // Construct the request.\n            req = new HttpRequest(first, url, (options.body !== undefined ? options.body : null), {\n                headers,\n                params,\n                reportProgress: options.reportProgress,\n                // By default, JSON is assumed to be returned for all calls.\n                responseType: options.responseType || 'json',\n                withCredentials: options.withCredentials,\n            });\n        }\n        // Start with an Observable.of() the initial request, and run the handler (which\n        // includes all interceptors) inside a concatMap(). This way, the handler runs\n        // inside an Observable chain, which causes interceptors to be re-run on every\n        // subscription (this also makes retries re-run the handler, including interceptors).\n        const events$ = of(req).pipe(concatMap((req) => this.handler.handle(req)));\n        // If coming via the API signature which accepts a previously constructed HttpRequest,\n        // the only option is to get the event stream. Otherwise, return the event stream if\n        // that is what was requested.\n        if (first instanceof HttpRequest || options.observe === 'events') {\n            return events$;\n        }\n        // The requested stream contains either the full response or the body. In either\n        // case, the first step is to filter the event stream to extract a stream of\n        // responses(s).\n        const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));\n        // Decide which stream to return.\n        switch (options.observe || 'body') {\n            case 'body':\n                // The requested stream is the body. Map the response stream to the response\n                // body. This could be done more simply, but a misbehaving interceptor might\n                // transform the response body into a different format and ignore the requested\n                // responseType. Guard against this by validating that the response is of the\n                // requested type.\n                switch (req.responseType) {\n                    case 'arraybuffer':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is an ArrayBuffer.\n                            if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                                throw new Error('Response is not an ArrayBuffer.');\n                            }\n                            return res.body;\n                        }));\n                    case 'blob':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a Blob.\n                            if (res.body !== null && !(res.body instanceof Blob)) {\n                                throw new Error('Response is not a Blob.');\n                            }\n                            return res.body;\n                        }));\n                    case 'text':\n                        return res$.pipe(map((res) => {\n                            // Validate that the body is a string.\n                            if (res.body !== null && typeof res.body !== 'string') {\n                                throw new Error('Response is not a string.');\n                            }\n                            return res.body;\n                        }));\n                    case 'json':\n                    default:\n                        // No validation needed for JSON responses, as they can be of any type.\n                        return res$.pipe(map((res) => res.body));\n                }\n            case 'response':\n                // The response stream was requested directly, so return it.\n                return res$;\n            default:\n                // Guard against new future observe types being added.\n                throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n        }\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `DELETE` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     *\n     * @param url     The endpoint URL.\n     * @param options The HTTP options to send with the request.\n     *\n     */\n    delete(url, options = {}) {\n        return this.request('DELETE', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `GET` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    get(url, options = {}) {\n        return this.request('GET', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `HEAD` request to execute on the server. The `HEAD` method returns\n     * meta information about the resource without transferring the\n     * resource itself. See the individual overloads for\n     * details on the return type.\n     */\n    head(url, options = {}) {\n        return this.request('HEAD', url, options);\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes a request with the special method\n     * `JSONP` to be dispatched via the interceptor pipeline.\n     * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n     * API endpoints that don't support newer,\n     * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n     * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n     * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n     * application making the request.\n     * The endpoint API must support JSONP callback for JSONP requests to work.\n     * The resource API returns the JSON response wrapped in a callback function.\n     * You can pass the callback function name as one of the query parameters.\n     * Note that JSONP requests can only be used with `GET` requests.\n     *\n     * @param url The resource URL.\n     * @param callbackParam The callback function name.\n     *\n     */\n    jsonp(url, callbackParam) {\n        return this.request('JSONP', url, {\n            params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n            observe: 'body',\n            responseType: 'json',\n        });\n    }\n    /**\n     * Constructs an `Observable` that, when subscribed, causes the configured\n     * `OPTIONS` request to execute on the server. This method allows the client\n     * to determine the supported HTTP methods and other capabilites of an endpoint,\n     * without implying a resource action. See the individual overloads for\n     * details on the return type.\n     */\n    options(url, options = {}) {\n        return this.request('OPTIONS', url, options);\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PATCH` request to execute on the server. See the individual overloads for\n     * details on the return type.\n     */\n    patch(url, body, options = {}) {\n        return this.request('PATCH', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `POST` request to execute on the server. The server responds with the location of\n     * the replaced resource. See the individual overloads for\n     * details on the return type.\n     */\n    post(url, body, options = {}) {\n        return this.request('POST', url, addBody(options, body));\n    }\n    /**\n     * Constructs an observable that, when subscribed, causes the configured\n     * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n     * with a new set of values.\n     * See the individual overloads for details on the return type.\n     */\n    put(url, body, options = {}) {\n        return this.request('PUT', url, addBody(options, body));\n    }\n}\nHttpClient.ɵfac = function HttpClient_Factory(t) { return new (t || HttpClient)(ɵngcc0.ɵɵinject(HttpHandler)); };\nHttpClient.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpClient, factory: HttpClient.ɵfac });\nHttpClient.ctorParameters = () => [\n    { type: HttpHandler }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClient, [{\n        type: Injectable\n    }], function () { return [{ type: HttpHandler }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nclass HttpInterceptorHandler {\n    constructor(next, interceptor) {\n        this.next = next;\n        this.interceptor = interceptor;\n    }\n    handle(req) {\n        return this.interceptor.intercept(req, this.next);\n    }\n}\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nconst HTTP_INTERCEPTORS = new InjectionToken('HTTP_INTERCEPTORS');\nclass NoopInterceptor {\n    intercept(req, next) {\n        return next.handle(req);\n    }\n}\nNoopInterceptor.ɵfac = function NoopInterceptor_Factory(t) { return new (t || NoopInterceptor)(); };\nNoopInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NoopInterceptor, factory: NoopInterceptor.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NoopInterceptor, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId = 0;\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nconst JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nconst JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nconst JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nclass JsonpCallbackContext {\n}\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\nclass JsonpClientBackend {\n    constructor(callbackMap, document) {\n        this.callbackMap = callbackMap;\n        this.document = document;\n        /**\n         * A resolved promise that can be used to schedule microtasks in the event handlers.\n         */\n        this.resolvedPromise = Promise.resolve();\n    }\n    /**\n     * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n     */\n    nextCallback() {\n        return `ng_jsonp_callback_${nextRequestId++}`;\n    }\n    /**\n     * Processes a JSONP request and returns an event stream of the results.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     *\n     */\n    handle(req) {\n        // Firstly, check both the method and response type. If either doesn't match\n        // then the request was improperly routed here and cannot be handled.\n        if (req.method !== 'JSONP') {\n            throw new Error(JSONP_ERR_WRONG_METHOD);\n        }\n        else if (req.responseType !== 'json') {\n            throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n        }\n        // Everything else happens inside the Observable boundary.\n        return new Observable((observer) => {\n            // The first step to make a request is to generate the callback name, and replace the\n            // callback placeholder in the URL with the name. Care has to be taken here to ensure\n            // a trailing &, if matched, gets inserted back into the URL in the correct place.\n            const callback = this.nextCallback();\n            const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n            // Construct the <script> tag and point it at the URL.\n            const node = this.document.createElement('script');\n            node.src = url;\n            // A JSONP request requires waiting for multiple callbacks. These variables\n            // are closed over and track state across those callbacks.\n            // The response object, if one has been received, or null otherwise.\n            let body = null;\n            // Whether the response callback has been called.\n            let finished = false;\n            // Whether the request has been cancelled (and thus any other callbacks)\n            // should be ignored.\n            let cancelled = false;\n            // Set the response callback in this.callbackMap (which will be the window\n            // object in the browser. The script being loaded via the <script> tag will\n            // eventually call this callback.\n            this.callbackMap[callback] = (data) => {\n                // Data has been received from the JSONP script. Firstly, delete this callback.\n                delete this.callbackMap[callback];\n                // Next, make sure the request wasn't cancelled in the meantime.\n                if (cancelled) {\n                    return;\n                }\n                // Set state to indicate data was received.\n                body = data;\n                finished = true;\n            };\n            // cleanup() is a utility closure that removes the <script> from the page and\n            // the response callback from the window. This logic is used in both the\n            // success, error, and cancellation paths, so it's extracted out for convenience.\n            const cleanup = () => {\n                // Remove the <script> tag if it's still on the page.\n                if (node.parentNode) {\n                    node.parentNode.removeChild(node);\n                }\n                // Remove the response callback from the callbackMap (window object in the\n                // browser).\n                delete this.callbackMap[callback];\n            };\n            // onLoad() is the success callback which runs after the response callback\n            // if the JSONP script loads successfully. The event itself is unimportant.\n            // If something went wrong, onLoad() may run without the response callback\n            // having been invoked.\n            const onLoad = (event) => {\n                // Do nothing if the request has been cancelled.\n                if (cancelled) {\n                    return;\n                }\n                // We wrap it in an extra Promise, to ensure the microtask\n                // is scheduled after the loaded endpoint has executed any potential microtask itself,\n                // which is not guaranteed in Internet Explorer and EdgeHTML. See issue #39496\n                this.resolvedPromise.then(() => {\n                    // Cleanup the page.\n                    cleanup();\n                    // Check whether the response callback has run.\n                    if (!finished) {\n                        // It hasn't, something went wrong with the request. Return an error via\n                        // the Observable error path. All JSONP errors have status 0.\n                        observer.error(new HttpErrorResponse({\n                            url,\n                            status: 0,\n                            statusText: 'JSONP Error',\n                            error: new Error(JSONP_ERR_NO_CALLBACK),\n                        }));\n                        return;\n                    }\n                    // Success. body either contains the response body or null if none was\n                    // returned.\n                    observer.next(new HttpResponse({\n                        body,\n                        status: 200,\n                        statusText: 'OK',\n                        url,\n                    }));\n                    // Complete the stream, the response is over.\n                    observer.complete();\n                });\n            };\n            // onError() is the error callback, which runs if the script returned generates\n            // a Javascript error. It emits the error via the Observable error channel as\n            // a HttpErrorResponse.\n            const onError = (error) => {\n                // If the request was already cancelled, no need to emit anything.\n                if (cancelled) {\n                    return;\n                }\n                cleanup();\n                // Wrap the error in a HttpErrorResponse.\n                observer.error(new HttpErrorResponse({\n                    error,\n                    status: 0,\n                    statusText: 'JSONP Error',\n                    url,\n                }));\n            };\n            // Subscribe to both the success (load) and error events on the <script> tag,\n            // and add it to the page.\n            node.addEventListener('load', onLoad);\n            node.addEventListener('error', onError);\n            this.document.body.appendChild(node);\n            // The request has now been successfully sent.\n            observer.next({ type: HttpEventType.Sent });\n            // Cancellation handler.\n            return () => {\n                // Track the cancellation so event listeners won't do anything even if already scheduled.\n                cancelled = true;\n                // Remove the event listeners so they won't run if the events later fire.\n                node.removeEventListener('load', onLoad);\n                node.removeEventListener('error', onError);\n                // And finally, clean up the page.\n                cleanup();\n            };\n        });\n    }\n}\nJsonpClientBackend.ɵfac = function JsonpClientBackend_Factory(t) { return new (t || JsonpClientBackend)(ɵngcc0.ɵɵinject(JsonpCallbackContext), ɵngcc0.ɵɵinject(DOCUMENT)); };\nJsonpClientBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpClientBackend, factory: JsonpClientBackend.ɵfac });\nJsonpClientBackend.ctorParameters = () => [\n    { type: JsonpCallbackContext },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpClientBackend, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpCallbackContext }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\nclass JsonpInterceptor {\n    constructor(jsonp) {\n        this.jsonp = jsonp;\n    }\n    /**\n     * Identifies and handles a given JSONP request.\n     * @param req The outgoing request object to handle.\n     * @param next The next interceptor in the chain, or the backend\n     * if no interceptors remain in the chain.\n     * @returns An observable of the event stream.\n     */\n    intercept(req, next) {\n        if (req.method === 'JSONP') {\n            return this.jsonp.handle(req);\n        }\n        // Fall through for normal HTTP requests.\n        return next.handle(req);\n    }\n}\nJsonpInterceptor.ɵfac = function JsonpInterceptor_Factory(t) { return new (t || JsonpInterceptor)(ɵngcc0.ɵɵinject(JsonpClientBackend)); };\nJsonpInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: JsonpInterceptor, factory: JsonpInterceptor.ɵfac });\nJsonpInterceptor.ctorParameters = () => [\n    { type: JsonpClientBackend }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(JsonpInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: JsonpClientBackend }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr) {\n    if ('responseURL' in xhr && xhr.responseURL) {\n        return xhr.responseURL;\n    }\n    if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n        return xhr.getResponseHeader('X-Request-URL');\n    }\n    return null;\n}\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nclass XhrFactory {\n}\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\nclass BrowserXhr {\n    constructor() { }\n    build() {\n        return (new XMLHttpRequest());\n    }\n}\nBrowserXhr.ɵfac = function BrowserXhr_Factory(t) { return new (t || BrowserXhr)(); };\nBrowserXhr.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: BrowserXhr, factory: BrowserXhr.ɵfac });\nBrowserXhr.ctorParameters = () => [];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(BrowserXhr, [{\n        type: Injectable\n    }], function () { return []; }, null); })();\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\nclass HttpXhrBackend {\n    constructor(xhrFactory) {\n        this.xhrFactory = xhrFactory;\n    }\n    /**\n     * Processes a request and returns a stream of response events.\n     * @param req The request object.\n     * @returns An observable of the response events.\n     */\n    handle(req) {\n        // Quick check to give a better error message when a user attempts to use\n        // HttpClient.jsonp() without installing the HttpClientJsonpModule\n        if (req.method === 'JSONP') {\n            throw new Error(`Attempted to construct Jsonp request without HttpClientJsonpModule installed.`);\n        }\n        // Everything happens on Observable subscription.\n        return new Observable((observer) => {\n            // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n            const xhr = this.xhrFactory.build();\n            xhr.open(req.method, req.urlWithParams);\n            if (!!req.withCredentials) {\n                xhr.withCredentials = true;\n            }\n            // Add all the requested headers.\n            req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n            // Add an Accept header if one isn't present already.\n            if (!req.headers.has('Accept')) {\n                xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n            }\n            // Auto-detect the Content-Type header if one isn't present already.\n            if (!req.headers.has('Content-Type')) {\n                const detectedType = req.detectContentTypeHeader();\n                // Sometimes Content-Type detection fails.\n                if (detectedType !== null) {\n                    xhr.setRequestHeader('Content-Type', detectedType);\n                }\n            }\n            // Set the responseType if one was requested.\n            if (req.responseType) {\n                const responseType = req.responseType.toLowerCase();\n                // JSON responses need to be processed as text. This is because if the server\n                // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n                // xhr.response will be null, and xhr.responseText cannot be accessed to\n                // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n                // is parsed by first requesting text and then applying JSON.parse.\n                xhr.responseType = ((responseType !== 'json') ? responseType : 'text');\n            }\n            // Serialize the request body if one is present. If not, this will be set to null.\n            const reqBody = req.serializeBody();\n            // If progress events are enabled, response headers will be delivered\n            // in two events - the HttpHeaderResponse event and the full HttpResponse\n            // event. However, since response headers don't change in between these\n            // two events, it doesn't make sense to parse them twice. So headerResponse\n            // caches the data extracted from the response whenever it's first parsed,\n            // to ensure parsing isn't duplicated.\n            let headerResponse = null;\n            // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n            // state, and memoizes it into headerResponse.\n            const partialFromXhr = () => {\n                if (headerResponse !== null) {\n                    return headerResponse;\n                }\n                // Read status and normalize an IE9 bug (https://bugs.jquery.com/ticket/1450).\n                const status = xhr.status === 1223 ? 204 : xhr.status;\n                const statusText = xhr.statusText || 'OK';\n                // Parse headers from XMLHttpRequest - this step is lazy.\n                const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n                // Read the response URL from the XMLHttpResponse instance and fall back on the\n                // request URL.\n                const url = getResponseUrl(xhr) || req.url;\n                // Construct the HttpHeaderResponse and memoize it.\n                headerResponse = new HttpHeaderResponse({ headers, status, statusText, url });\n                return headerResponse;\n            };\n            // Next, a few closures are defined for the various events which XMLHttpRequest can\n            // emit. This allows them to be unregistered as event listeners later.\n            // First up is the load event, which represents a response being fully available.\n            const onLoad = () => {\n                // Read response state from the memoized partial data.\n                let { headers, status, statusText, url } = partialFromXhr();\n                // The body will be read out if present.\n                let body = null;\n                if (status !== 204) {\n                    // Use XMLHttpRequest.response if set, responseText otherwise.\n                    body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n                }\n                // Normalize another potential bug (this one comes from CORS).\n                if (status === 0) {\n                    status = !!body ? 200 : 0;\n                }\n                // ok determines whether the response will be transmitted on the event or\n                // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n                // but a successful status code can still result in an error if the user\n                // asked for JSON data and the body cannot be parsed as such.\n                let ok = status >= 200 && status < 300;\n                // Check whether the body needs to be parsed as JSON (in many cases the browser\n                // will have done that already).\n                if (req.responseType === 'json' && typeof body === 'string') {\n                    // Save the original body, before attempting XSSI prefix stripping.\n                    const originalBody = body;\n                    body = body.replace(XSSI_PREFIX, '');\n                    try {\n                        // Attempt the parse. If it fails, a parse error should be delivered to the user.\n                        body = body !== '' ? JSON.parse(body) : null;\n                    }\n                    catch (error) {\n                        // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n                        // JSON response. Restore the original body (including any XSSI prefix) to deliver\n                        // a better error response.\n                        body = originalBody;\n                        // If this was an error request to begin with, leave it as a string, it probably\n                        // just isn't JSON. Otherwise, deliver the parsing error to the user.\n                        if (ok) {\n                            // Even though the response status was 2xx, this is still an error.\n                            ok = false;\n                            // The parse error contains the text of the body that failed to parse.\n                            body = { error, text: body };\n                        }\n                    }\n                }\n                if (ok) {\n                    // A successful response is delivered on the event stream.\n                    observer.next(new HttpResponse({\n                        body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                    // The full body has been received and delivered, no further events\n                    // are possible. This request is complete.\n                    observer.complete();\n                }\n                else {\n                    // An unsuccessful request is delivered on the error channel.\n                    observer.error(new HttpErrorResponse({\n                        // The error in this case is the response body (error from the server).\n                        error: body,\n                        headers,\n                        status,\n                        statusText,\n                        url: url || undefined,\n                    }));\n                }\n            };\n            // The onError callback is called when something goes wrong at the network level.\n            // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n            // transmitted on the error channel.\n            const onError = (error) => {\n                const { url } = partialFromXhr();\n                const res = new HttpErrorResponse({\n                    error,\n                    status: xhr.status || 0,\n                    statusText: xhr.statusText || 'Unknown Error',\n                    url: url || undefined,\n                });\n                observer.error(res);\n            };\n            // The sentHeaders flag tracks whether the HttpResponseHeaders event\n            // has been sent on the stream. This is necessary to track if progress\n            // is enabled since the event will be sent on only the first download\n            // progerss event.\n            let sentHeaders = false;\n            // The download progress event handler, which is only registered if\n            // progress events are enabled.\n            const onDownProgress = (event) => {\n                // Send the HttpResponseHeaders event if it hasn't been sent already.\n                if (!sentHeaders) {\n                    observer.next(partialFromXhr());\n                    sentHeaders = true;\n                }\n                // Start building the download progress event to deliver on the response\n                // event stream.\n                let progressEvent = {\n                    type: HttpEventType.DownloadProgress,\n                    loaded: event.loaded,\n                };\n                // Set the total number of bytes in the event if it's available.\n                if (event.lengthComputable) {\n                    progressEvent.total = event.total;\n                }\n                // If the request was for text content and a partial response is\n                // available on XMLHttpRequest, include it in the progress event\n                // to allow for streaming reads.\n                if (req.responseType === 'text' && !!xhr.responseText) {\n                    progressEvent.partialText = xhr.responseText;\n                }\n                // Finally, fire the event.\n                observer.next(progressEvent);\n            };\n            // The upload progress event handler, which is only registered if\n            // progress events are enabled.\n            const onUpProgress = (event) => {\n                // Upload progress events are simpler. Begin building the progress\n                // event.\n                let progress = {\n                    type: HttpEventType.UploadProgress,\n                    loaded: event.loaded,\n                };\n                // If the total number of bytes being uploaded is available, include\n                // it.\n                if (event.lengthComputable) {\n                    progress.total = event.total;\n                }\n                // Send the event.\n                observer.next(progress);\n            };\n            // By default, register for load and error events.\n            xhr.addEventListener('load', onLoad);\n            xhr.addEventListener('error', onError);\n            xhr.addEventListener('timeout', onError);\n            xhr.addEventListener('abort', onError);\n            // Progress events are only enabled if requested.\n            if (req.reportProgress) {\n                // Download progress is always enabled if requested.\n                xhr.addEventListener('progress', onDownProgress);\n                // Upload progress depends on whether there is a body to upload.\n                if (reqBody !== null && xhr.upload) {\n                    xhr.upload.addEventListener('progress', onUpProgress);\n                }\n            }\n            // Fire the request, and notify the event stream that it was fired.\n            xhr.send(reqBody);\n            observer.next({ type: HttpEventType.Sent });\n            // This is the return from the Observable function, which is the\n            // request cancellation handler.\n            return () => {\n                // On a cancellation, remove all registered event listeners.\n                xhr.removeEventListener('error', onError);\n                xhr.removeEventListener('abort', onError);\n                xhr.removeEventListener('load', onLoad);\n                xhr.removeEventListener('timeout', onError);\n                if (req.reportProgress) {\n                    xhr.removeEventListener('progress', onDownProgress);\n                    if (reqBody !== null && xhr.upload) {\n                        xhr.upload.removeEventListener('progress', onUpProgress);\n                    }\n                }\n                // Finally, abort the in-flight request.\n                if (xhr.readyState !== xhr.DONE) {\n                    xhr.abort();\n                }\n            };\n        });\n    }\n}\nHttpXhrBackend.ɵfac = function HttpXhrBackend_Factory(t) { return new (t || HttpXhrBackend)(ɵngcc0.ɵɵinject(XhrFactory)); };\nHttpXhrBackend.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXhrBackend, factory: HttpXhrBackend.ɵfac });\nHttpXhrBackend.ctorParameters = () => [\n    { type: XhrFactory }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXhrBackend, [{\n        type: Injectable\n    }], function () { return [{ type: XhrFactory }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst XSRF_COOKIE_NAME = new InjectionToken('XSRF_COOKIE_NAME');\nconst XSRF_HEADER_NAME = new InjectionToken('XSRF_HEADER_NAME');\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nclass HttpXsrfTokenExtractor {\n}\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\nclass HttpXsrfCookieExtractor {\n    constructor(doc, platform, cookieName) {\n        this.doc = doc;\n        this.platform = platform;\n        this.cookieName = cookieName;\n        this.lastCookieString = '';\n        this.lastToken = null;\n        /**\n         * @internal for testing\n         */\n        this.parseCount = 0;\n    }\n    getToken() {\n        if (this.platform === 'server') {\n            return null;\n        }\n        const cookieString = this.doc.cookie || '';\n        if (cookieString !== this.lastCookieString) {\n            this.parseCount++;\n            this.lastToken = ɵparseCookieValue(cookieString, this.cookieName);\n            this.lastCookieString = cookieString;\n        }\n        return this.lastToken;\n    }\n}\nHttpXsrfCookieExtractor.ɵfac = function HttpXsrfCookieExtractor_Factory(t) { return new (t || HttpXsrfCookieExtractor)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID), ɵngcc0.ɵɵinject(XSRF_COOKIE_NAME)); };\nHttpXsrfCookieExtractor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfCookieExtractor, factory: HttpXsrfCookieExtractor.ɵfac });\nHttpXsrfCookieExtractor.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_COOKIE_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfCookieExtractor, [{\n        type: Injectable\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [PLATFORM_ID]\n            }] }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_COOKIE_NAME]\n            }] }]; }, null); })();\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\nclass HttpXsrfInterceptor {\n    constructor(tokenService, headerName) {\n        this.tokenService = tokenService;\n        this.headerName = headerName;\n    }\n    intercept(req, next) {\n        const lcUrl = req.url.toLowerCase();\n        // Skip both non-mutating requests and absolute URLs.\n        // Non-mutating requests don't require a token, and absolute URLs require special handling\n        // anyway as the cookie set\n        // on our origin is not the same as the token expected by another origin.\n        if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n            lcUrl.startsWith('https://')) {\n            return next.handle(req);\n        }\n        const token = this.tokenService.getToken();\n        // Be careful not to overwrite an existing header of the same name.\n        if (token !== null && !req.headers.has(this.headerName)) {\n            req = req.clone({ headers: req.headers.set(this.headerName, token) });\n        }\n        return next.handle(req);\n    }\n}\nHttpXsrfInterceptor.ɵfac = function HttpXsrfInterceptor_Factory(t) { return new (t || HttpXsrfInterceptor)(ɵngcc0.ɵɵinject(HttpXsrfTokenExtractor), ɵngcc0.ɵɵinject(XSRF_HEADER_NAME)); };\nHttpXsrfInterceptor.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpXsrfInterceptor, factory: HttpXsrfInterceptor.ɵfac });\nHttpXsrfInterceptor.ctorParameters = () => [\n    { type: HttpXsrfTokenExtractor },\n    { type: String, decorators: [{ type: Inject, args: [XSRF_HEADER_NAME,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpXsrfInterceptor, [{\n        type: Injectable\n    }], function () { return [{ type: HttpXsrfTokenExtractor }, { type: String, decorators: [{\n                type: Inject,\n                args: [XSRF_HEADER_NAME]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\nclass HttpInterceptingHandler {\n    constructor(backend, injector) {\n        this.backend = backend;\n        this.injector = injector;\n        this.chain = null;\n    }\n    handle(req) {\n        if (this.chain === null) {\n            const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n            this.chain = interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n        }\n        return this.chain.handle(req);\n    }\n}\nHttpInterceptingHandler.ɵfac = function HttpInterceptingHandler_Factory(t) { return new (t || HttpInterceptingHandler)(ɵngcc0.ɵɵinject(HttpBackend), ɵngcc0.ɵɵinject(ɵngcc0.Injector)); };\nHttpInterceptingHandler.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: HttpInterceptingHandler, factory: HttpInterceptingHandler.ɵfac });\nHttpInterceptingHandler.ctorParameters = () => [\n    { type: HttpBackend },\n    { type: Injector }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpInterceptingHandler, [{\n        type: Injectable\n    }], function () { return [{ type: HttpBackend }, { type: ɵngcc0.Injector }]; }, null); })();\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nfunction interceptingHandler(backend, interceptors = []) {\n    if (!interceptors) {\n        return backend;\n    }\n    return interceptors.reduceRight((next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nfunction jsonpCallbackContext() {\n    if (typeof window === 'object') {\n        return window;\n    }\n    return {};\n}\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\nclass HttpClientXsrfModule {\n    /**\n     * Disable the default XSRF protection.\n     */\n    static disable() {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                { provide: HttpXsrfInterceptor, useClass: NoopInterceptor },\n            ],\n        };\n    }\n    /**\n     * Configure XSRF protection.\n     * @param options An object that can specify either or both\n     * cookie name or header name.\n     * - Cookie name default is `XSRF-TOKEN`.\n     * - Header name default is `X-XSRF-TOKEN`.\n     *\n     */\n    static withOptions(options = {}) {\n        return {\n            ngModule: HttpClientXsrfModule,\n            providers: [\n                options.cookieName ? { provide: XSRF_COOKIE_NAME, useValue: options.cookieName } : [],\n                options.headerName ? { provide: XSRF_HEADER_NAME, useValue: options.headerName } : [],\n            ],\n        };\n    }\n}\nHttpClientXsrfModule.ɵfac = function HttpClientXsrfModule_Factory(t) { return new (t || HttpClientXsrfModule)(); };\nHttpClientXsrfModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientXsrfModule });\nHttpClientXsrfModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        HttpXsrfInterceptor,\n        { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n        { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n        { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n        { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientXsrfModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    HttpXsrfInterceptor,\n                    { provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true },\n                    { provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor },\n                    { provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN' },\n                    { provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN' },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientModule {\n}\nHttpClientModule.ɵfac = function HttpClientModule_Factory(t) { return new (t || HttpClientModule)(); };\nHttpClientModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientModule });\nHttpClientModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        HttpClient,\n        { provide: HttpHandler, useClass: HttpInterceptingHandler },\n        HttpXhrBackend,\n        { provide: HttpBackend, useExisting: HttpXhrBackend },\n        BrowserXhr,\n        { provide: XhrFactory, useExisting: BrowserXhr },\n    ], imports: [[\n            HttpClientXsrfModule.withOptions({\n                cookieName: 'XSRF-TOKEN',\n                headerName: 'X-XSRF-TOKEN'\n            }),\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(HttpClientModule, { imports: [HttpClientXsrfModule] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientModule, [{\n        type: NgModule,\n        args: [{\n                /**\n                 * Optional configuration for XSRF protection.\n                 */\n                imports: [\n                    HttpClientXsrfModule.withOptions({\n                        cookieName: 'XSRF-TOKEN',\n                        headerName: 'X-XSRF-TOKEN'\n                    }),\n                ],\n                /**\n                 * Configures the [dependency injector](guide/glossary#injector) where it is imported\n                 * with supporting services for HTTP communications.\n                 */\n                providers: [\n                    HttpClient,\n                    { provide: HttpHandler, useClass: HttpInterceptingHandler },\n                    HttpXhrBackend,\n                    { provide: HttpBackend, useExisting: HttpXhrBackend },\n                    BrowserXhr,\n                    { provide: XhrFactory, useExisting: BrowserXhr },\n                ]\n            }]\n    }], null, null); })();\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\nclass HttpClientJsonpModule {\n}\nHttpClientJsonpModule.ɵfac = function HttpClientJsonpModule_Factory(t) { return new (t || HttpClientJsonpModule)(); };\nHttpClientJsonpModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: HttpClientJsonpModule });\nHttpClientJsonpModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [\n        JsonpClientBackend,\n        { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n        { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n    ] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(HttpClientJsonpModule, [{\n        type: NgModule,\n        args: [{\n                providers: [\n                    JsonpClientBackend,\n                    { provide: JsonpCallbackContext, useFactory: jsonpCallbackContext },\n                    { provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true },\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { HTTP_INTERCEPTORS, HttpBackend, HttpClient, HttpClientJsonpModule, HttpClientModule, HttpClientXsrfModule, HttpErrorResponse, HttpEventType, HttpHandler, HttpHeaderResponse, HttpHeaders, HttpParams, HttpRequest, HttpResponse, HttpResponseBase, HttpUrlEncodingCodec, HttpXhrBackend, HttpXsrfTokenExtractor, JsonpClientBackend, JsonpInterceptor, XhrFactory, HttpInterceptingHandler as ɵHttpInterceptingHandler, NoopInterceptor as ɵangular_packages_common_http_http_a, JsonpCallbackContext as ɵangular_packages_common_http_http_b, jsonpCallbackContext as ɵangular_packages_common_http_http_c, BrowserXhr as ɵangular_packages_common_http_http_d, XSRF_COOKIE_NAME as ɵangular_packages_common_http_http_e, XSRF_HEADER_NAME as ɵangular_packages_common_http_http_f, HttpXsrfCookieExtractor as ɵangular_packages_common_http_http_g, HttpXsrfInterceptor as ɵangular_packages_common_http_http_h };\n\n//# sourceMappingURL=http.js.map"]},"metadata":{},"sourceType":"module"}