{"ast":null,"code":"import { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n  var concurrent = Number.POSITIVE_INFINITY;\n  var scheduler = null;\n\n  for (var _len = arguments.length, observables = new Array(_len), _key = 0; _key < _len; _key++) {\n    observables[_key] = arguments[_key];\n  }\n\n  var last = observables[observables.length - 1];\n\n  if (isScheduler(last)) {\n    scheduler = observables.pop();\n\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return observables[0];\n  }\n\n  return mergeAll(concurrent)(fromArray(observables, scheduler));\n} //# sourceMappingURL=merge.js.map","map":{"version":3,"sources":["/Users/zacklin/OneDrive - Florida State Students/FSU/2021 Spring/CEN4090L/bookwebapp/front-angular/node_modules/rxjs/_esm2015/internal/observable/merge.js"],"names":["Observable","isScheduler","mergeAll","fromArray","merge","concurrent","Number","POSITIVE_INFINITY","scheduler","observables","last","length","pop"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,SAASC,KAAT,GAA+B;AAClC,MAAIC,UAAU,GAAGC,MAAM,CAACC,iBAAxB;AACA,MAAIC,SAAS,GAAG,IAAhB;;AAFkC,oCAAbC,WAAa;AAAbA,IAAAA,WAAa;AAAA;;AAGlC,MAAIC,IAAI,GAAGD,WAAW,CAACA,WAAW,CAACE,MAAZ,GAAqB,CAAtB,CAAtB;;AACA,MAAIV,WAAW,CAACS,IAAD,CAAf,EAAuB;AACnBF,IAAAA,SAAS,GAAGC,WAAW,CAACG,GAAZ,EAAZ;;AACA,QAAIH,WAAW,CAACE,MAAZ,GAAqB,CAArB,IAA0B,OAAOF,WAAW,CAACA,WAAW,CAACE,MAAZ,GAAqB,CAAtB,CAAlB,KAA+C,QAA7E,EAAuF;AACnFN,MAAAA,UAAU,GAAGI,WAAW,CAACG,GAAZ,EAAb;AACH;AACJ,GALD,MAMK,IAAI,OAAOF,IAAP,KAAgB,QAApB,EAA8B;AAC/BL,IAAAA,UAAU,GAAGI,WAAW,CAACG,GAAZ,EAAb;AACH;;AACD,MAAIJ,SAAS,KAAK,IAAd,IAAsBC,WAAW,CAACE,MAAZ,KAAuB,CAA7C,IAAkDF,WAAW,CAAC,CAAD,CAAX,YAA0BT,UAAhF,EAA4F;AACxF,WAAOS,WAAW,CAAC,CAAD,CAAlB;AACH;;AACD,SAAOP,QAAQ,CAACG,UAAD,CAAR,CAAqBF,SAAS,CAACM,WAAD,EAAcD,SAAd,CAA9B,CAAP;AACH,C,CACD","sourcesContent":["import { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge(...observables) {\n    let concurrent = Number.POSITIVE_INFINITY;\n    let scheduler = null;\n    let last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map"]},"metadata":{},"sourceType":"module"}