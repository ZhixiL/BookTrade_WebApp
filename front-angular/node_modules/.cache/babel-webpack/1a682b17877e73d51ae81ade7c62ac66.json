{"ast":null,"code":"import _inherits from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _classCallCheck from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Number.POSITIVE_INFINITY;\n  return function (source) {\n    return source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n  };\n}\nexport var MergeScanOperator = /*#__PURE__*/function () {\n  function MergeScanOperator(accumulator, seed, concurrent) {\n    _classCallCheck(this, MergeScanOperator);\n\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n\n  _createClass(MergeScanOperator, [{\n    key: \"call\",\n    value: function call(subscriber, source) {\n      return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n  }]);\n\n  return MergeScanOperator;\n}();\nexport var MergeScanSubscriber = /*#__PURE__*/function (_SimpleOuterSubscribe) {\n  _inherits(MergeScanSubscriber, _SimpleOuterSubscribe);\n\n  var _super = _createSuper(MergeScanSubscriber);\n\n  function MergeScanSubscriber(destination, accumulator, acc, concurrent) {\n    var _this;\n\n    _classCallCheck(this, MergeScanSubscriber);\n\n    _this = _super.call(this, destination);\n    _this.accumulator = accumulator;\n    _this.acc = acc;\n    _this.concurrent = concurrent;\n    _this.hasValue = false;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  _createClass(MergeScanSubscriber, [{\n    key: \"_next\",\n    value: function _next(value) {\n      if (this.active < this.concurrent) {\n        var index = this.index++;\n        var destination = this.destination;\n        var ish;\n\n        try {\n          var accumulator = this.accumulator;\n          ish = accumulator(this.acc, value, index);\n        } catch (e) {\n          return destination.error(e);\n        }\n\n        this.active++;\n\n        this._innerSub(ish);\n      } else {\n        this.buffer.push(value);\n      }\n    }\n  }, {\n    key: \"_innerSub\",\n    value: function _innerSub(ish) {\n      var innerSubscriber = new SimpleInnerSubscriber(this);\n      var destination = this.destination;\n      destination.add(innerSubscriber);\n      var innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    }\n  }, {\n    key: \"_complete\",\n    value: function _complete() {\n      this.hasCompleted = true;\n\n      if (this.active === 0 && this.buffer.length === 0) {\n        if (this.hasValue === false) {\n          this.destination.next(this.acc);\n        }\n\n        this.destination.complete();\n      }\n\n      this.unsubscribe();\n    }\n  }, {\n    key: \"notifyNext\",\n    value: function notifyNext(innerValue) {\n      var destination = this.destination;\n      this.acc = innerValue;\n      this.hasValue = true;\n      destination.next(innerValue);\n    }\n  }, {\n    key: \"notifyComplete\",\n    value: function notifyComplete() {\n      var buffer = this.buffer;\n      this.active--;\n\n      if (buffer.length > 0) {\n        this._next(buffer.shift());\n      } else if (this.active === 0 && this.hasCompleted) {\n        if (this.hasValue === false) {\n          this.destination.next(this.acc);\n        }\n\n        this.destination.complete();\n      }\n    }\n  }]);\n\n  return MergeScanSubscriber;\n}(SimpleOuterSubscriber); //# sourceMappingURL=mergeScan.js.map","map":{"version":3,"sources":["/Users/chunli/Desktop/CEN4090L-Team5/front-angular/node_modules/rxjs/_esm2015/internal/operators/mergeScan.js"],"names":["SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","mergeScan","accumulator","seed","concurrent","Number","POSITIVE_INFINITY","source","lift","MergeScanOperator","subscriber","subscribe","MergeScanSubscriber","destination","acc","hasValue","hasCompleted","buffer","active","index","value","ish","e","error","_innerSub","push","innerSubscriber","add","innerSubscription","length","next","complete","unsubscribe","innerValue","_next","shift"],"mappings":"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","sourcesContent":["import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {\n    return (source) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\nexport class MergeScanOperator {\n    constructor(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n}\nexport class MergeScanSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, accumulator, acc, concurrent) {\n        super(destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            const index = this.index++;\n            const destination = this.destination;\n            let ish;\n            try {\n                const { accumulator } = this;\n                ish = accumulator(this.acc, value, index);\n            }\n            catch (e) {\n                return destination.error(e);\n            }\n            this.active++;\n            this._innerSub(ish);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        const { destination } = this;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    }\n}\n//# sourceMappingURL=mergeScan.js.map"]},"metadata":{},"sourceType":"module"}